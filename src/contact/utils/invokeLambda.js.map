{"version":3,"file":"invokeLambda.js","sourceRoot":"","sources":["invokeLambda.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAE/B,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC,CAAC;AAErD,MAAM,eAAe,GAAG,KAAK,EAAE,EACpC,OAAO,EACP,cAAc,EACd,GAAG,EACH,IAAI,EACJ,SAAS,GAOV,EAAE,EAAE;IACH,MAAM,MAAM,GAAG;QACb,YAAY,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,uBAAuB,CAAC,cAAc;QACxE,cAAc,EAAE,OAAO,EAAE,6BAA6B;QACtD,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;KAC3E,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AACzC,CAAC,CAAC;AAnBW,QAAA,eAAe,mBAmB1B","sourcesContent":["import * as AWS from 'aws-sdk';\r\n\r\nconst lambda = new AWS.Lambda({ apiVersion: '2015-03-31' });\r\n\r\nexport const invokeCsvLambda = async ({\r\n  fileUrl,\r\n  collectionName,\r\n  map,\r\n  page,\r\n  createdBy,\r\n}: {\r\n  fileUrl: string;\r\n  collectionName: string;\r\n  map: any;\r\n  page: number;\r\n  createdBy: string;\r\n}) => {\r\n  const params = {\r\n    FunctionName: `${process.env.STAGE}-write-csv-to-mongodb` /* required */,\r\n    InvocationType: 'Event', //| RequestResponse | DryRun,\r\n    Payload: JSON.stringify({ fileUrl, collectionName, map, page, createdBy }),\r\n  };\r\n  return lambda.invoke(params).promise();\r\n};\r\n"]}