{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DB } from '../utils/DB';\r\nimport Template from '../template/utils/templateModel';\r\nimport Page from '../template/utils/pageModel';\r\nimport { getCurrentUser } from '../utils/authentication';\r\nimport { Post } from './utils/postModel';\r\nimport { getTags } from './utils/getTags';\r\nimport { User } from '../user/utils/userModel';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\n\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const { fieldName } = event.info;\r\n    const { arguments: args, identity } = event;\r\n    let data: any = [];\r\n    let count = 0;\r\n    const tempFilter: any = {};\r\n    const user = await getCurrentUser(identity);\r\n\r\n    const { page = 1, limit = 50, search = '', active = null, sortBy = '-createdAt' } = args;\r\n\r\n    const userSelect = '_id userId name picture';\r\n    const userPopulate = {\r\n      path: 'createdBy',\r\n      select: userSelect,\r\n    };\r\n\r\n    const postPopulate = [\r\n      userPopulate,\r\n      {\r\n        path: 'tags.tag',\r\n        select: 'title description media slug types',\r\n        populate: {\r\n          path: 'types',\r\n          model: 'Template',\r\n          select: 'slug',\r\n          strictPopulate: false,\r\n        },\r\n      },\r\n    ];\r\n\r\n    switch (fieldName) {\r\n      case 'getPosts': {\r\n        if (active !== null) {\r\n          tempFilter.active = active;\r\n        }\r\n        data = await Post.find({\r\n          ...tempFilter,\r\n          body: { $regex: search, $options: 'i' },\r\n        })\r\n          .populate(postPopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit)\r\n          .sort(sortBy);\r\n        count = await Post.countDocuments({\r\n          ...tempFilter,\r\n          body: { $regex: search, $options: 'i' },\r\n        });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'getPost': {\r\n        return await Post.findById(args._id).populate(postPopulate);\r\n      }\r\n      case 'getMyPosts': {\r\n        await User.findById(user._id);\r\n        data = await Post.find({\r\n          createdBy: user._id,\r\n          body: { $regex: search, $options: 'i' },\r\n        })\r\n          .populate(postPopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit)\r\n          .sort(sortBy);\r\n        count = await Post.countDocuments({\r\n          createdBy: user._id,\r\n          body: { $regex: search, $options: 'i' },\r\n        });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'getPostsByUserId': {\r\n        await User.findById(args.userId);\r\n        data = await Post.find({\r\n          createdBy: args.userId,\r\n          body: { $regex: search, $options: 'i' },\r\n        })\r\n          .populate(postPopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit)\r\n          .sort(sortBy);\r\n        count = await Post.countDocuments({\r\n          createdBy: args.userId,\r\n          body: { $regex: search, $options: 'i' },\r\n        });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'createPost': {\r\n        const tags = await getTags(args.body);\r\n        const post = await Post.create({\r\n          ...args,\r\n          createdBy: user._id,\r\n          tags,\r\n        });\r\n        return await post.populate(postPopulate); //.execPopulate();\r\n      }\r\n      case 'updatePost': {\r\n        const tags = await getTags(args.body);\r\n        const post: any = await Post.findOneAndUpdate(\r\n          { _id: args._id, createdBy: user._id },\r\n          { ...args, updatedAt: new Date(), updatedBy: user._id, tags },\r\n          {\r\n            new: true,\r\n            runValidators: true,\r\n          },\r\n        );\r\n        return await post.populate(postPopulate); //.execPopulate();\r\n      }\r\n      case 'deletePost': {\r\n        await Post.findOneAndDelete({ _id: args._id, createdBy: user._id });\r\n        return true;\r\n      }\r\n      default:\r\n        if (args.registerModel) {\r\n          await Template.findOne();\r\n          await Page.findOne();\r\n        }\r\n        throw new Error('Something went wrong! Please check your Query or Mutation');\r\n    }\r\n  } catch (error) {\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}