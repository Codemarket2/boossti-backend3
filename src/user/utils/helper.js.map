{"version":3,"file":"helper.js","sourceRoot":"","sources":["helper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as AWS from 'aws-sdk';\r\nimport { DB } from '../../utils/DB';\r\nimport { User } from './userModel';\r\nimport { UserFormConfig } from '../../form/utils/userFormConfig';\r\nimport { FormModel } from '../../form/utils/formModel';\r\nimport { ResponseModel } from '../../form/utils/responseModel';\r\nimport { IValue as ResponseValueType } from '../../form/types/response';\r\nimport { PostAuthenticationTriggerEvent } from 'aws-lambda';\r\n\r\nconst { USER_POOL_ID } = process.env;\r\n\r\nconst cognitoIdp = new AWS.CognitoIdentityServiceProvider();\r\n\r\nexport const listUsersByEmail = async ({\r\n  userPoolId,\r\n  email,\r\n}: {\r\n  userPoolId: string;\r\n  email: string;\r\n}) => {\r\n  const params = {\r\n    UserPoolId: userPoolId,\r\n    Filter: `email = \"${email}\"`,\r\n  };\r\n\r\n  return cognitoIdp.listUsers(params).promise();\r\n};\r\n\r\nexport const adminLinkUserAccounts = async ({\r\n  username,\r\n  userPoolId,\r\n  providerName,\r\n  providerUserId,\r\n}: {\r\n  username: any;\r\n  userPoolId: string;\r\n  providerName: any;\r\n  providerUserId: string;\r\n}) => {\r\n  const params = {\r\n    DestinationUser: {\r\n      ProviderAttributeValue: username,\r\n      ProviderName: 'Cognito',\r\n    },\r\n    SourceUser: {\r\n      ProviderAttributeName: 'Cognito_Subject',\r\n      ProviderAttributeValue: providerUserId,\r\n      ProviderName: providerName,\r\n    },\r\n    UserPoolId: userPoolId,\r\n  };\r\n\r\n  return cognitoIdp.adminLinkProviderForUser(params).promise();\r\n};\r\n\r\nexport const adminCreateUser = async ({\r\n  userPoolId,\r\n  email,\r\n  name,\r\n  picture,\r\n}: {\r\n  userPoolId: string;\r\n  email: string;\r\n  name: string;\r\n  picture: string;\r\n}): Promise<AWS.CognitoIdentityServiceProvider.AdminCreateUserResponse> => {\r\n  const params = {\r\n    UserPoolId: userPoolId,\r\n    // SUPRESS prevents sending an email with the temporary password\r\n    // to the user on account creation\r\n    MessageAction: 'SUPPRESS',\r\n    Username: email,\r\n    UserAttributes: [\r\n      {\r\n        Name: 'name',\r\n        Value: name,\r\n      },\r\n      {\r\n        Name: 'picture',\r\n        Value: picture,\r\n      },\r\n      {\r\n        Name: 'email',\r\n        Value: email,\r\n      },\r\n      {\r\n        Name: 'email_verified',\r\n        Value: 'true',\r\n      },\r\n    ],\r\n  };\r\n\r\n  return cognitoIdp.adminCreateUser(params).promise();\r\n};\r\n\r\nfunction generatePassword(): string {\r\n  return `${Math.random() // Generate random number, eg: 0.123456\r\n    .toString(36) // Convert  to base-36 : \"0.4fzyo82mvyr\"\r\n    .slice(-8)}42`; // Cut off last 8 characters : \"yo82mvyr\" and add a number, because the cognito password policy requires a number\r\n}\r\n\r\nexport const adminSetUserPassword = async ({\r\n  userPoolId,\r\n  email,\r\n}: {\r\n  userPoolId: string;\r\n  email: string;\r\n}) => {\r\n  const params = {\r\n    Password: generatePassword(),\r\n    UserPoolId: userPoolId,\r\n    Username: email,\r\n    Permanent: true,\r\n  };\r\n\r\n  return cognitoIdp.adminSetUserPassword(params).promise();\r\n};\r\n\r\nexport const markUserEmailAsVerified = async (username: string, userPoolId: string) => {\r\n  const params = {\r\n    UserAttributes: [\r\n      {\r\n        Name: 'email_verified',\r\n        Value: 'true',\r\n      },\r\n    ],\r\n    UserPoolId: userPoolId,\r\n    Username: username,\r\n  };\r\n\r\n  return cognitoIdp.adminUpdateUserAttributes(params).promise();\r\n};\r\n\r\nexport const adminToggleUserStatus = (username: string, status: boolean) => {\r\n  const params: any = {\r\n    UserPoolId: USER_POOL_ID,\r\n    Username: username,\r\n  };\r\n  if (status) {\r\n    return cognitoIdp.adminEnableUser(params).promise();\r\n  }\r\n  return cognitoIdp.adminDisableUser(params).promise();\r\n};\r\n\r\nexport const adminUpdateUserAttribute = (\r\n  username = '',\r\n  attribute: { Name: string; Value: string },\r\n) => {\r\n  const params = {\r\n    UserPoolId: USER_POOL_ID || '',\r\n    Username: username,\r\n    UserAttributes: [attribute],\r\n  };\r\n\r\n  return cognitoIdp.adminUpdateUserAttributes(params).promise();\r\n};\r\n\r\nexport const adminConfirmSignUp = (username = '') => {\r\n  const params = {\r\n    UserPoolId: USER_POOL_ID || '',\r\n    Username: username,\r\n  };\r\n  return cognitoIdp.adminConfirmSignUp(params).promise();\r\n};\r\n\r\n/**\r\n * updates the emailVerified field of the User in Database\r\n * @param userAttributes AWS Cognito User's user attribute.\r\n *\r\n * Links :\r\n * - User Pool Attributes : https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\r\n * */\r\nexport const updateEmailVerified = async (event: PostAuthenticationTriggerEvent) => {\r\n  const { userAttributes } = event.request;\r\n\r\n  // if (!userAttributes['custom:email_verified'] || userAttributes['custom:email_verified'] === '0') {\r\n  //   await cognitoIdp\r\n  //     .adminUpdateUserAttributes({\r\n  //       UserAttributes: [\r\n  //         {\r\n  //           Name: 'custom:email_verified',\r\n  //           Value: '1',\r\n  //         },\r\n  //       ],\r\n  //       UserPoolId: event.userPoolId,\r\n  //       Username: userAttributes.email,\r\n  //     })\r\n  //     .promise();\r\n  // }\r\n\r\n  await DB();\r\n  const userForm = await FormModel.findOne({\r\n    slug: UserFormConfig.slug,\r\n  });\r\n\r\n  if (!userForm) {\r\n    throw new Error('Users Form Now Found');\r\n  }\r\n\r\n  const userResponseId = userAttributes['custom:_id'];\r\n  const isEmailVerifiedinCongito = userAttributes['cognito:user_status'] === 'CONFIRMED';\r\n\r\n  const emailVerifiedFieldId = userForm.fields\r\n    .find((val) => val.label === UserFormConfig.fields.emailVerified)\r\n    ?._id.toString();\r\n\r\n  if (!emailVerifiedFieldId) {\r\n    throw new Error(\r\n      `'${UserFormConfig.fields.emailVerified}' field not found in the user's form in database`,\r\n    );\r\n  }\r\n\r\n  const userResponse = await ResponseModel.findOne({\r\n    _id: userResponseId,\r\n  });\r\n\r\n  if (!userResponse) {\r\n    throw new Error('User not present in database but the user is present in AWS Cognito');\r\n  }\r\n\r\n  const EmailVerifiedField = userResponse.values.find(\r\n    (value) => value.field === emailVerifiedFieldId,\r\n  );\r\n\r\n  const defaultResponseValue = {\r\n    field: '',\r\n    value: '',\r\n    valueNumber: null,\r\n    valueBoolean: null,\r\n    valueDate: null,\r\n    media: [],\r\n    values: [],\r\n    template: null,\r\n    page: null,\r\n    form: null,\r\n    response: null,\r\n    options: { option: false },\r\n    tempMedia: [],\r\n    tempMediaFiles: [],\r\n  };\r\n\r\n  if (!EmailVerifiedField) {\r\n    // Email Verified Field is not present. so create the field and push it in values array\r\n    const newResponseValue: Partial<ResponseValueType> = {\r\n      ...defaultResponseValue,\r\n      field: emailVerifiedFieldId,\r\n      valueBoolean: isEmailVerifiedinCongito,\r\n    };\r\n\r\n    await userResponse.updateOne({\r\n      $push: {\r\n        values: newResponseValue,\r\n      },\r\n    });\r\n  } else if (EmailVerifiedField.valueBoolean !== isEmailVerifiedinCongito) {\r\n    await ResponseModel.updateOne(\r\n      {\r\n        _id: userResponseId,\r\n        'values.field': emailVerifiedFieldId,\r\n      },\r\n      {\r\n        $set: {\r\n          'values.$.valueBoolean': isEmailVerifiedinCongito,\r\n          'values.$.value': '',\r\n          'values.$.valueNumber': null,\r\n          'values.$.valueDate': null,\r\n          'values.$.media': [],\r\n          'values.$.values': [],\r\n          'values.$.template': null,\r\n          'values.$.page': null,\r\n          'values.$.form': null,\r\n          'values.$.response': null,\r\n          'values.$.options': { option: false },\r\n        },\r\n      },\r\n    );\r\n  }\r\n};\r\n"]}