{"version":3,"file":"cognitoTriggers.js","sourceRoot":"","sources":["cognitoTriggers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-prototype-builtins */\r\nimport {\r\n  PreSignUpTriggerEvent,\r\n  PostConfirmationTriggerEvent,\r\n  PostAuthenticationTriggerEvent,\r\n  PostConfirmationConfirmSignUpTriggerEvent,\r\n} from 'aws-lambda';\r\nimport {\r\n  listUsersByEmail,\r\n  adminLinkUserAccounts,\r\n  adminCreateUser,\r\n  adminSetUserPassword,\r\n  markUserEmailAsVerified,\r\n  adminUpdateUserAttribute,\r\n  adminConfirmSignUp,\r\n  updateEmailVerified,\r\n} from './helper';\r\n\r\nimport { postAuthenticationTrigger } from './PostAuthenticationTrigger';\r\n\r\nimport { User } from './userModel';\r\nimport { DB } from '../../utils/DB';\r\n\r\nexport { postAuthenticationTrigger };\r\n\r\nexport const preSignUpTrigger = async (\r\n  event: PreSignUpTriggerEvent | PostConfirmationTriggerEvent | PostAuthenticationTriggerEvent,\r\n) => {\r\n  await DB();\r\n  event.request.userAttributes['custom:role'] = 'user';\r\n  if (event.userName.includes('acebook')) {\r\n    event.request.userAttributes.picture = JSON.parse(\r\n      event.request.userAttributes.picture,\r\n    ).data.url;\r\n  }\r\n\r\n  const {\r\n    triggerSource,\r\n    userPoolId,\r\n    userName,\r\n    request: {\r\n      userAttributes: { email, name, picture },\r\n    },\r\n  } = event;\r\n\r\n  const EXTERNAL_AUTHENTICATION_PROVIDER = 'PreSignUp_ExternalProvider';\r\n\r\n  if (triggerSource === EXTERNAL_AUTHENTICATION_PROVIDER) {\r\n    // --> User has registered with Google/Facebook external providers\r\n    const usersFilteredByEmail = await listUsersByEmail({\r\n      userPoolId,\r\n      email,\r\n    });\r\n\r\n    // userName example: \"facebook_12324325436\" or \"google_1237823478\"\r\n    let providerName: any = userName.split('_')[0];\r\n    const providerUserId = userName.split('_')[1];\r\n    providerName = ['Google', 'Facebook'].find(\r\n      (val) => providerName.toUpperCase() === val.toUpperCase(),\r\n    );\r\n\r\n    if (usersFilteredByEmail.Users && usersFilteredByEmail.Users.length > 0) {\r\n      // user already has cognito account\r\n      const cognitoUsername = usersFilteredByEmail.Users[0].Username || 'username-not-found';\r\n\r\n      if (usersFilteredByEmail.Users[0].UserStatus === 'UNCONFIRMED') {\r\n        await adminConfirmSignUp(cognitoUsername);\r\n      }\r\n      // if they have access to the Google / Facebook account of email X, verify their email.\r\n      // even if their cognito native account is not verified\r\n      await adminLinkUserAccounts({\r\n        username: cognitoUsername,\r\n        userPoolId,\r\n        providerName,\r\n        providerUserId,\r\n      });\r\n    } else {\r\n      /* --> user does not have a cognito native account ->\r\n              1. create a native cognito account\r\n              2. change the password, to change status from FORCE_CHANGE_PASSWORD to CONFIRMED\r\n              3. merge the social and the native accounts\r\n              4. add the user to a group - OPTIONAL\r\n          */\r\n\r\n      const createdCognitoUser = await adminCreateUser({\r\n        userPoolId,\r\n        email,\r\n        name,\r\n        picture,\r\n      });\r\n\r\n      await adminSetUserPassword({ userPoolId, email });\r\n\r\n      const cognitoNativeUsername = createdCognitoUser.User\r\n        ? createdCognitoUser.User.Username\r\n        : 'username-not-found';\r\n\r\n      await adminLinkUserAccounts({\r\n        username: cognitoNativeUsername,\r\n        userPoolId,\r\n        providerName,\r\n        providerUserId,\r\n      });\r\n\r\n      // @ts-expect-error event.response.autoConfirmUser can be {}\r\n      event.response.autoConfirmUser = true;\r\n      // @ts-expect-error event.response.autoVerifyEmail can be {}\r\n      event.response.autoVerifyEmail = true;\r\n    }\r\n  }\r\n\r\n  if (triggerSource === 'PreSignUp_SignUp' || triggerSource === 'PreSignUp_AdminCreateUser') {\r\n    const newUser = await User.create({\r\n      userId: userName,\r\n      name,\r\n      email,\r\n      picture,\r\n      createdBy: event.triggerSource,\r\n    });\r\n    if (newUser) {\r\n      event.request.userAttributes['custom:_id'] = newUser._id;\r\n    }\r\n  }\r\n\r\n  if (triggerSource === 'PreSignUp_ExternalProvider') {\r\n    const providerName = userName.split('_')[0].toUpperCase();\r\n    throw new Error(`${providerName}_ACCOUNT_LINKED`);\r\n  }\r\n\r\n  return event;\r\n};\r\n\r\nexport const postConfirmationSignupTrigger = async (\r\n  event: PostConfirmationConfirmSignUpTriggerEvent,\r\n) => {\r\n  console.log('Post Confirmation Signup Triggered');\r\n  // if the email is verified in cognito then also make emailVerified = true property of User in the Database\r\n  // await updateEmailVerified(event);\r\n\r\n  return event;\r\n};\r\n"]}