{"version":3,"file":"PostAuthenticationTrigger.js","sourceRoot":"","sources":["PostAuthenticationTrigger.ts"],"names":[],"mappings":";;;AAEA,qCAA+C;AAExC,MAAM,yBAAyB,GAAG,KAAK,EAAE,KAAqC,EAAE,EAAE;IACvF,MAAM,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACpD,oEAAoE;IACpE,gBAAgB;IAChB,mCAAmC;IACnC,+CAA+C;IAC/C,sBAAsB;IACtB,QAAQ;IACR,6CAA6C;IAC7C,0BAA0B;IAC1B,gCAAgC;IAChC,QAAQ;IACR,IAAI;IAEJ,gGAAgG;IAChG,MAAM,IAAA,4BAAmB,EAAC,KAAK,CAAC,CAAC;IAEjC,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAnBW,QAAA,yBAAyB,6BAmBpC","sourcesContent":["/* eslint-disable no-prototype-builtins */\r\nimport { PostAuthenticationTriggerEvent } from 'aws-lambda';\r\nimport { updateEmailVerified } from './helper';\r\n\r\nexport const postAuthenticationTrigger = async (event: PostAuthenticationTriggerEvent) => {\r\n  const { userAttributes } = event.request;\r\n  console.log('Post Authentication SignIn Triggered');\r\n  // if (!event.request.userAttributes.hasOwnProperty('custom:_id')) {\r\n  //   await DB();\r\n  //   const userId = event.userName;\r\n  //   const tempUser: any = await User.findOne({\r\n  //     userId: userId,\r\n  //   });\r\n  //   await adminUpdateUserAttribute(userId, {\r\n  //     Name: 'custom:_id',\r\n  //     Value: `${tempUser._id}`,\r\n  //   });\r\n  // }\r\n\r\n  // if the email is verified then also make emailVerified = true property of User in the Database\r\n  await updateEmailVerified(event);\r\n\r\n  return event;\r\n};\r\n"]}