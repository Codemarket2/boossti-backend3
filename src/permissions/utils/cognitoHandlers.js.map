{"version":3,"file":"cognitoHandlers.js","sourceRoot":"","sources":["cognitoHandlers.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG;IACvB,8BAA8B,EAAE,YAAY;CAC7C,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,8BAA8B,CAAC;IAClD,MAAM,EAAE,WAAW;CACpB,CAAC,CAAC;AAsEI,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAA4B,EAAE,EAAE;IACvE,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;KACzB,CAAC;IACF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC5C,CAAC,CAAC;AATW,QAAA,kBAAkB,sBAS7B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAA4B,EAAE,EAAE;IACvE,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;KACzB,CAAC;IACF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC5C,CAAC,CAAC;AATW,QAAA,kBAAkB,sBAS7B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAA4B,EAAE,EAAE;IACvE,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;KAC/B,CAAC;IACF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC5C,CAAC,CAAC;AANW,QAAA,kBAAkB,sBAM7B;AAEK,MAAM,YAAY,GAAG,KAAK,EAAE,OAAsB,EAAE,EAAE;IAC3D,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,SAAS,EAAE,OAAO,CAAC,SAAS;KAC7B,CAAC;IACF,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC3C,CAAC,CAAC;AAPW,QAAA,YAAY,gBAOvB;AAEK,MAAM,gBAAgB,GAAG,KAAK,EAAE,OAAyB,EAAE,EAAE;IAClE,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,SAAS,EAAE,OAAO,CAAC,SAAS;KAC7B,CAAC;IACF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC9C,CAAC,CAAC;AANW,QAAA,gBAAgB,oBAM3B;AAEK,MAAM,gBAAgB,GAAG,KAAK,EAAE,OAAsB,EAAE,EAAE;IAC/D,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,SAAS,EAAE,OAAO,CAAC,SAAS;KAC7B,CAAC;IACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AACjD,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B;AAEK,MAAM,cAAc,GAAG,KAAK,EAAE,OAA8B,EAAE,EAAE;IACrE,MAAM,MAAM,GAAkE;QAC5E,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IACF,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AACpD,CAAC,CAAC;AAPW,QAAA,cAAc,kBAOzB;AACK,MAAM,mBAAmB,GAAG,KAAK,EAAE,OAA8B,EAAE,EAAE;IAC1E,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IACF,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AACzD,CAAC,CAAC;AAPW,QAAA,mBAAmB,uBAO9B;AACF,6DAA6D;AACtD,MAAM,aAAa,GAAG,KAAK,EAAE,OAAoB,EAAE,EAAE;IAC1D,MAAM,MAAM,GAA8D;QACxE,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,sBAAsB,EAAE,OAAO,CAAC,sBAAsB;QACtD,cAAc,EAAE,OAAO,CAAC,cAAc;QACtC,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;QAC5C,aAAa,EAAE,OAAO,CAAC,aAAa;KACrC,CAAC;IACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAEzD,0BAA0B;IAC1B,8BAA8B;IAC9B,8CAA8C;IAC9C,yBAAyB;IACzB,4BAA4B;IAC5B,oCAAoC;IACpC,iDAAiD;IACjD,SAAS;IACT,OAAO;IACP,gBAAgB;IAEhB,2DAA2D;IAC3D,+FAA+F;IAC/F,0BAA0B;IAC1B,4BAA4B;IAC5B,2CAA2C;IAC3C,kCAAkC;IAClC,sCAAsC;IACtC,uBAAuB;IACvB,OAAO;IACP,gBAAgB;IAEhB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAlCW,QAAA,aAAa,iBAkCxB;AAEK,MAAM,UAAU,GAAG,KAAK,EAAE,OAAoB,EAAE,EAAE;IACvD,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IACF,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAChD,CAAC,CAAC;AANW,QAAA,UAAU,cAMrB;AAEK,MAAM,oBAAoB,GAAG,KAAK,EAAE,OAA8B,EAAE,EAAE;IAC3E,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,cAAc,EAAE,OAAO,CAAC,cAAc;KACvC,CAAC;IACF,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC1D,CAAC,CAAC;AAPW,QAAA,oBAAoB,wBAO/B;AAEK,MAAM,cAAc,GAAG,KAAK,EAAE,OAAkB,EAAE,EAAE;IACzD,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IAEF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC7C,CAAC,CAAC;AAPW,QAAA,cAAc,kBAOzB;AAEK,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAAkB,EAAE,EAAE;IAC7D,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,IAAA,sBAAc,EAAC;YAChC,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC3B,CAAC,CAAC;QACH,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,IAAI;SACZ,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,CAAC,IAAI,KAAK,uBAAuB,EAAE,CAAC;YAC3C,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,IAAI;aACZ,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,CAAC,OAAO;aACrB,CAAC;QACJ,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AAxBW,QAAA,kBAAkB,sBAwB7B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAA4B,EAAE,EAAE;IACvE,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;IACF,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AACvD,CAAC,CAAC;AANW,QAAA,kBAAkB,sBAM7B","sourcesContent":["import * as AWS from 'aws-sdk';\r\nAWS.config.apiVersions = {\r\n  cognitoidentityserviceprovider: '2016-04-18',\r\n};\r\nconst cisp = new AWS.CognitoIdentityServiceProvider({\r\n  region: 'us-east-1',\r\n});\r\n\r\ninterface ICreateCognitoGroup {\r\n  GroupName: string;\r\n  UserPoolId: string;\r\n  Description?: string;\r\n  Precedence?: number;\r\n  RoleArn?: string;\r\n}\r\n\r\ninterface IDeleteCognitoGroup {\r\n  GroupName: string;\r\n  UserPoolId: string;\r\n}\r\n\r\ninterface IGetGroupList {\r\n  UserPoolId: string;\r\n  Limit?: number;\r\n  NextToken?: string;\r\n}\r\n\r\ninterface IGetUserPoolList {\r\n  MaxResults: number;\r\n  NextToken?: string;\r\n}\r\n\r\ninterface IGetUsersList {\r\n  GroupName: string;\r\n  UserPoolId: string;\r\n  Limit?: number;\r\n  NextToken?: string;\r\n}\r\n\r\ninterface IAddRemoveUserToGroup {\r\n  GroupName: string;\r\n  UserPoolId: string;\r\n  Username: string;\r\n}\r\n\r\ninterface ICreateUser {\r\n  UserPoolId: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest['UserPoolId'];\r\n  Username: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest['Username'];\r\n  DesiredDeliveryMediums?: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest['DesiredDeliveryMediums'];\r\n  UserAttributes?: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest['UserAttributes'];\r\n  TemporaryPassword: string;\r\n  MessageAction?: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest['MessageAction'];\r\n  email: string;\r\n}\r\n\r\ninterface IUpdateUserAttributes {\r\n  UserPoolId: string;\r\n  Username: string;\r\n  UserAttributes: { Name: string; value?: string }[];\r\n}\r\n\r\ninterface IDeleteUser {\r\n  UserPoolId: string;\r\n  Username: string;\r\n}\r\n\r\ninterface IGetUsers {\r\n  Username: string;\r\n  UserPoolId: string;\r\n}\r\n\r\ninterface IGetGroupListOfUser {\r\n  UserPoolId: string;\r\n  Username: string;\r\n}\r\n\r\nexport const createCognitoGroup = async (payload: ICreateCognitoGroup) => {\r\n  const params = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n    Description: payload.Description,\r\n    Precedence: payload.Precedence,\r\n    RoleArn: payload.RoleArn,\r\n  };\r\n  return cisp.createGroup(params).promise();\r\n};\r\n\r\nexport const updateCognitoGroup = async (payload: ICreateCognitoGroup) => {\r\n  const params = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n    Description: payload.Description,\r\n    Precedence: payload.Precedence,\r\n    RoleArn: payload.RoleArn,\r\n  };\r\n  return cisp.updateGroup(params).promise();\r\n};\r\n\r\nexport const deleteCognitoGroup = async (payload: IDeleteCognitoGroup) => {\r\n  const params = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n  };\r\n  return cisp.deleteGroup(params).promise();\r\n};\r\n\r\nexport const getGroupList = async (payload: IGetGroupList) => {\r\n  const params = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Limit: payload.Limit,\r\n    NextToken: payload.NextToken,\r\n  };\r\n  return cisp.listGroups(params).promise();\r\n};\r\n\r\nexport const getUserPoolsList = async (payload: IGetUserPoolList) => {\r\n  const params = {\r\n    MaxResults: payload.MaxResults,\r\n    NextToken: payload.NextToken,\r\n  };\r\n  return cisp.listUserPools(params).promise();\r\n};\r\n\r\nexport const getGroupUserList = async (payload: IGetUsersList) => {\r\n  const params = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n    Limit: payload.Limit,\r\n    NextToken: payload.NextToken,\r\n  };\r\n  return cisp.listUsersInGroup(params).promise();\r\n};\r\n\r\nexport const addUserToGroup = async (payload: IAddRemoveUserToGroup) => {\r\n  const params: AWS.CognitoIdentityServiceProvider.AdminAddUserToGroupRequest = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n  };\r\n  return cisp.adminAddUserToGroup(params).promise();\r\n};\r\nexport const removeUserFromGroup = async (payload: IAddRemoveUserToGroup) => {\r\n  const params = {\r\n    GroupName: payload.GroupName,\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n  };\r\n  return cisp.adminRemoveUserFromGroup(params).promise();\r\n};\r\n/** this function creates the user in the AWS Cognito pool */\r\nexport const createAWSUser = async (payload: ICreateUser) => {\r\n  const params: AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n    DesiredDeliveryMediums: payload.DesiredDeliveryMediums,\r\n    UserAttributes: payload.UserAttributes,\r\n    TemporaryPassword: payload.TemporaryPassword,\r\n    MessageAction: payload.MessageAction,\r\n  };\r\n  const res = await cisp.adminCreateUser(params).promise();\r\n\r\n  // const res2 = await cisp\r\n  //   .respondToAuthChallenge({\r\n  //     ChallengeName: 'NEW_PASSWORD_REQUIRED',\r\n  //     ClientId: 'asdas',\r\n  //     ChallengeResponses: {\r\n  //       USERNAME: payload.Username,\r\n  //       NEW_PASSWORD: payload.TemporaryPassword,\r\n  //     },\r\n  //   })\r\n  //   .promise();\r\n\r\n  // SETS THE TEMPORARY PASSWORD AS USER'S PERMANENT PASSWORD\r\n  // SO WHEN CREATING USER WITH adminCreateUser() the \"FORCE_RESET_PASSWORD\" Challenge is removed\r\n  // const res2 = await cisp\r\n  //   .adminSetUserPassword({\r\n  //     Password: payload.TemporaryPassword,\r\n  //     Username: payload.Username,\r\n  //     UserPoolId: payload.UserPoolId,\r\n  //     Permanent: true,\r\n  //   })\r\n  //   .promise();\r\n\r\n  return res;\r\n};\r\n\r\nexport const deleteUser = async (payload: IDeleteUser) => {\r\n  const params = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n  };\r\n  return cisp.adminDeleteUser(params).promise();\r\n};\r\n\r\nexport const updateUserAttributes = async (payload: IUpdateUserAttributes) => {\r\n  const params = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n    UserAttributes: payload.UserAttributes,\r\n  };\r\n  return cisp.adminUpdateUserAttributes(params).promise();\r\n};\r\n\r\nexport const getUserByEmail = async (payload: IGetUsers) => {\r\n  const params = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n  };\r\n\r\n  return cisp.adminGetUser(params).promise();\r\n};\r\n\r\nexport const isUserAlreadyExist = async (payload: IGetUsers) => {\r\n  try {\r\n    const user = await getUserByEmail({\r\n      UserPoolId: payload.UserPoolId,\r\n      Username: payload.Username,\r\n    });\r\n    return {\r\n      message: true,\r\n      data: user,\r\n      error: null,\r\n    };\r\n  } catch (error) {\r\n    if (error.code === 'UserNotFoundException') {\r\n      return {\r\n        message: false,\r\n        error: null,\r\n      };\r\n    } else {\r\n      return {\r\n        message: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const getGroupListOfUser = async (payload: IGetGroupListOfUser) => {\r\n  const params = {\r\n    UserPoolId: payload.UserPoolId,\r\n    Username: payload.Username,\r\n  };\r\n  return cisp.adminListGroupsForUser(params).promise();\r\n};\r\n"]}