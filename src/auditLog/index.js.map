{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,oCAAiC;AACjC,yDAAwE;AAGxE,uCAAiC;AAE1B,MAAM,OAAO,GAAG,KAAK,EAAE,KAAmB,EAAgB,EAAE;IACjE,IAAI,CAAC;QACH,MAAM,IAAA,OAAE,GAAE,CAAC;QACX,MAAM,EACJ,IAAI,EAAE,EAAE,SAAS,EAAE,EACnB,QAAQ,GACT,GAAG,KAAK,CAAC;QACV,+CAA+C;QAC/C,MAAM,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAEpC,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,cAAc,CAAC,CAAC,CAAC;gBACpB,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,MAAM,GAAG,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;gBACjF,IAAI,MAAM,GAAQ,EAAE,CAAC;gBACrB,IAAI,UAAU,IAAI,MAAM,EAAE,CAAC;oBACzB,MAAM,GAAG;wBACP,GAAG,MAAM;wBACT,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;qBACrE,CAAC;gBACJ,CAAC;qBAAM,IAAI,UAAU,EAAE,CAAC;oBACtB,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,UAAU,EAAE,CAAC;gBACrC,CAAC;gBAED,MAAM,IAAI,GAAG,MAAM,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC;qBAC1C,QAAQ,CAAC,gCAAgB,CAAC;qBAC1B,IAAI,CAAC,MAAM,CAAC;qBACZ,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;qBAChB,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;gBAC5B,MAAM,KAAK,GAAG,MAAM,6BAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACzD,OAAO;oBACL,IAAI;oBACJ,KAAK;iBACN,CAAC;YACJ,CAAC;YACD;gBACE,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,MAAM,GAAG,KAAK,CAAC;QACrB,MAAM,MAAM,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAzCW,QAAA,OAAO,WAyClB","sourcesContent":["import { DB } from '../utils/DB';\r\nimport { AuditLogModel, auditLogPopulate } from './utils/auditLogModel';\r\n// import { getCurrentUser } from '../utils/authentication';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\nimport { Types } from 'mongoose';\r\n\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const {\r\n      info: { fieldName },\r\n      identity,\r\n    } = event;\r\n    // const user = await getCurrentUser(identity);\r\n    const args = { ...event.arguments };\r\n\r\n    switch (fieldName) {\r\n      case 'getAuditLogs': {\r\n        const { page = 1, limit = 20, sortBy = '-createdAt', documentId, formId } = args;\r\n        let filter: any = {};\r\n        if (documentId && formId) {\r\n          filter = {\r\n            ...filter,\r\n            $or: [{ documentId }, { 'diff.formId': new Types.ObjectId(formId) }],\r\n          };\r\n        } else if (documentId) {\r\n          filter = { ...filter, documentId };\r\n        }\r\n\r\n        const data = await AuditLogModel.find(filter)\r\n          .populate(auditLogPopulate)\r\n          .sort(sortBy)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit);\r\n        const count = await AuditLogModel.countDocuments(filter);\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      default:\r\n        throw new Error('Something went wrong! Please check your Query or Mutation');\r\n    }\r\n  } catch (error) {\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}