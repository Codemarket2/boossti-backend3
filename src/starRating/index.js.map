{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DB } from '../utils/DB';\r\nimport { getCurrentUser } from '../utils/authentication';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\nimport { User } from '../user/utils/userModel';\r\nimport { StarRating } from './utils/starRatingModel';\r\nimport * as mongoose from 'mongoose';\r\n\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const { fieldName } = event.info;\r\n    const { identity } = event;\r\n    let args = { ...event.arguments };\r\n    const user = await getCurrentUser(identity);\r\n    const userSelect = 'name picture _id';\r\n    let data: any = [];\r\n    const { page = 1, limit = 10 } = args;\r\n    let tempStarRatings: any;\r\n    const userPopulate = {\r\n      path: 'createdBy',\r\n      select: userSelect,\r\n    };\r\n    if (fieldName.toLocaleLowerCase().includes('create') && user && user._id) {\r\n      args = { ...args, createdBy: user._id };\r\n    } else if (fieldName.toLocaleLowerCase().includes('update') && user && user._id) {\r\n      args = { ...args, updatedBy: user._id };\r\n    }\r\n\r\n    switch (fieldName) {\r\n      case 'createStarRating': {\r\n        const rating = await StarRating.create({\r\n          ...args,\r\n          starRating: args.starRating,\r\n        });\r\n        const populated = await rating.populate(userPopulate); //.execPopulate();\r\n        return populated;\r\n      }\r\n      case 'updateStarRating': {\r\n        tempStarRatings = await StarRating.findOneAndUpdate(\r\n          { _id: args._id, createdBy: user._id },\r\n          { starRating: args.starRating, updatedAt: new Date(), updatedBy: user._id },\r\n          {\r\n            new: true,\r\n            runValidators: true,\r\n          },\r\n        );\r\n        return await tempStarRatings.populate(userPopulate); //.execPopulate();\r\n      }\r\n      case 'getStarRating': {\r\n        const getStarRating = await StarRating.findById(args._id).populate(userPopulate);\r\n        return await getStarRating;\r\n      }\r\n      case 'getRatingCounts': {\r\n        const userStarRating = await StarRating.findOne({\r\n          parentId: args.parentId,\r\n          createdBy: user._id,\r\n        }).populate(userPopulate);\r\n        const averageStarRating = await StarRating.aggregate([\r\n          {\r\n            $match: {\r\n              parentId: new mongoose.Types.ObjectId(args.parentId),\r\n            },\r\n          },\r\n          {\r\n            $group: {\r\n              _id: '$parentId',\r\n              avgRating: { $avg: { $ifNull: ['$starRating', 0] } },\r\n            },\r\n          },\r\n          {\r\n            $project: { avgRating: { $round: ['$avgRating', 1] } },\r\n          },\r\n        ]);\r\n        const ratingCount = await StarRating.countDocuments({\r\n          parentId: args.parentId,\r\n        });\r\n        return {\r\n          userStarRating,\r\n          averageStarRating: averageStarRating[0]?.avgRating,\r\n          ratingCount,\r\n        };\r\n      }\r\n      case 'getStarRatingsByParentId': {\r\n        await User.findById(args.userId);\r\n        data = await StarRating.find({\r\n          parentId: args.parentId,\r\n        })\r\n          .populate(userPopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit);\r\n        const count = await StarRating.countDocuments({\r\n          parentId: args.parentId,\r\n        });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'deleteStarRating': {\r\n        await StarRating.findOneAndDelete({\r\n          parentId: args.parentId,\r\n          createdBy: user._id,\r\n        });\r\n        return true;\r\n      }\r\n      default:\r\n        await StarRating.findOne();\r\n        await User.findOne();\r\n        throw new Error('Something went wrong! Please check your Query or Mutation');\r\n    }\r\n  } catch (error) {\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}