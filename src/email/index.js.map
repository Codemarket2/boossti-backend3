{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DB } from '../utils/DB';\r\nimport { getCurrentUser } from '../utils/authentication';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\nimport EmailModel, { EmailCampaign, EmailTemplate } from './utils/emailModel';\r\nimport { userPopulate } from '../utils/populate';\r\nimport { createTemplate, deleteTemplate, updateTemplate } from './utils/sesCreateEmailTemplate';\r\nimport { sendBulkEmails, sendBulkTemplatedEmail } from './utils/sesTemplateEmail';\r\nimport { MailingList } from '../contact/utils/contactModel';\r\nimport { sendOneByOneEmail } from './utils/sesOneEmail';\r\nimport { replaceVariables } from './utils/variables';\r\n\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const {\r\n      info: { fieldName },\r\n      identity,\r\n    } = event;\r\n    const user = await getCurrentUser(identity);\r\n    let args = { ...event.arguments };\r\n    // const { page = 1, limit = 20, search = '', active = null, sortBy = '-createdAt' } = args;\r\n    if (fieldName.toLocaleLowerCase().includes('create') && user && user._id) {\r\n      args = { ...args, createdBy: user._id };\r\n    } else if (fieldName.toLocaleLowerCase().includes('update') && user && user._id) {\r\n      args = { ...args, updatedBy: user._id };\r\n    }\r\n\r\n    // sendEmail: process.env.SENDER_EMAIL,\r\n    switch (fieldName) {\r\n      case 'createSendEmail':\r\n        {\r\n          const { senderEmail, receiverEmail, body, subject, mailingList, sendIndividual } = args;\r\n          let response, findReceiverEmail;\r\n          if (mailingList && receiverEmail.length === 0) {\r\n            const mList = await MailingList.findOne({ listName: mailingList })\r\n              .populate('contacts')\r\n              .exec();\r\n\r\n            findReceiverEmail = mList?.contacts;\r\n          } else {\r\n            findReceiverEmail = receiverEmail;\r\n          }\r\n\r\n          response = await EmailModel.create({\r\n            senderEmail,\r\n            receiverEmail: findReceiverEmail,\r\n            body,\r\n            subject,\r\n          });\r\n          response = await response.populate(userPopulate); //.execPopulate();\r\n          if (sendIndividual === true) {\r\n            await Promise.all(\r\n              findReceiverEmail.map(async (contact) => {\r\n                const newBody = replaceVariables(body, contact);\r\n                const newSubject = replaceVariables(subject, contact);\r\n                const newSenderEmail = replaceVariables(senderEmail, contact);\r\n                await sendOneByOneEmail({\r\n                  from: newSenderEmail,\r\n                  to: [contact.email],\r\n                  body: newBody,\r\n                  subject: newSubject,\r\n                })\r\n                  .then(() => console.log('Email Sent'))\r\n                  .catch((e) => console.error(e.message));\r\n              }),\r\n            );\r\n          } else {\r\n            await sendBulkEmails({\r\n              from: senderEmail,\r\n              to: findReceiverEmail,\r\n              body: body,\r\n              subject: subject,\r\n            })\r\n              .then(() => console.log('Email Sent'))\r\n              .catch((e) => console.error(e.message));\r\n          }\r\n          return response;\r\n        }\r\n        break;\r\n      case 'getAllEmails':\r\n        {\r\n          const data = await EmailModel.find().populate(userPopulate);\r\n          const count = await EmailModel.countDocuments();\r\n          return {\r\n            data,\r\n            count,\r\n          };\r\n        }\r\n        break;\r\n      case 'getOneEmailTemplate':\r\n        {\r\n          return await EmailTemplate.findById(event.arguments.id);\r\n        }\r\n        break;\r\n      case 'getAllEmailTemplatesByUserId':\r\n        {\r\n          return await EmailTemplate.find({ userId: event.arguments.userId });\r\n        }\r\n        break;\r\n      case 'getAllEmailTemplates':\r\n        {\r\n          return await EmailTemplate.find();\r\n        }\r\n        break;\r\n      case 'createOneEmailTemplate':\r\n        {\r\n          await createTemplate(event.arguments);\r\n          return await EmailTemplate.create(event.arguments);\r\n        }\r\n        break;\r\n      case 'updateOneEmailTemplate':\r\n        {\r\n          await updateTemplate(event.arguments);\r\n          return await EmailTemplate.findByIdAndUpdate(event.arguments.id, event.arguments, {\r\n            new: true,\r\n            runValidators: true,\r\n          });\r\n        }\r\n        break;\r\n      case 'deleteOneEmailTemplate':\r\n        {\r\n          await deleteTemplate(event.arguments);\r\n          return await EmailTemplate.findByIdAndDelete(event.arguments.id);\r\n        }\r\n        break;\r\n      case 'getOneEmailCampaign':\r\n        {\r\n          return await EmailCampaign.findById(event.arguments.id);\r\n        }\r\n        break;\r\n      case 'getAllEmailCampaignsByUserId':\r\n        {\r\n          return await EmailCampaign.find({ userId: event.arguments.userId });\r\n        }\r\n        break;\r\n      case 'getAllEmailCampaigns':\r\n        {\r\n          return await EmailCampaign.find();\r\n        }\r\n        break;\r\n      case 'createOneEmailCampaign':\r\n        {\r\n          const cRes = await sendBulkTemplatedEmail(event.arguments);\r\n          return await EmailCampaign.create({\r\n            campaignRes: cRes,\r\n            ...event.arguments,\r\n          });\r\n        }\r\n        break;\r\n      case 'updateOneEmailCampaign':\r\n        {\r\n          return await EmailCampaign.findByIdAndUpdate(event.arguments.id, event.arguments, {\r\n            new: true,\r\n            runValidators: true,\r\n          });\r\n        }\r\n        break;\r\n      case 'deleteOneEmailCampaign':\r\n        {\r\n          return await EmailCampaign.findByIdAndDelete(event.arguments.id);\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(\r\n          'Something went wrong in backend src/email/index.ts! Please check your Query or Mutation',\r\n        );\r\n    }\r\n  } catch (error) {\r\n    if (error.runThis) {\r\n      console.log('error', error);\r\n    }\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}