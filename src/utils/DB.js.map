{"version":3,"file":"DB.js","sourceRoot":"","sources":["DB.ts"],"names":[],"mappings":";;;AAAA,qCAAqC;AACrC,2DAAwD;AAExD,IAAI,WAAW,CAAC;AAChB,IAAI,eAAoB,CAAC;AACzB,IAAI,EAAO,CAAC;AACZ,oDAAoD;AAE7C,MAAM,EAAE,GAAG,KAAK,EAAE,SAAkB,EAAE,EAAE;IAC7C,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,UAAE,CAAC,CAAC;IACxB,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,CAAC;IACtC,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5D,IAAI;QACF,IAAI,WAAW,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;SACtD;aAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;YAChC,oDAAoD;YACpD,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACzD;aAAM;YACL,eAAe,GAAG,kBAAkB,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;YAC9E,gDAAgD;YAChD,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAClD,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAC3C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;SAC1C;QACD,MAAM,IAAA,qCAAiB,GAAE,CAAC;KAC3B;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,KAAK,GAAG,wBAAwB,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;QAC5G,MAAM,KAAK,CAAC;KACb;AACH,CAAC,CAAC;AAtBW,QAAA,EAAE,MAsBb","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport { createCollections } from './createCollections';\r\n\r\nlet isConnected;\r\nlet escapedDBString: any;\r\nlet db: any;\r\n// export const DB = async (DB_STRING?: string) => {\r\n\r\nexport const DB = async (DB_STRING?: string) => {\r\n  console.log('DB=' + DB);\r\n  console.log('DB_STRING=' + DB_STRING);\r\n  console.log('process.env.DATABASE=' + process.env.DATABASE);\r\n  try {\r\n    if (isConnected) {\r\n      console.log('=> using existing database connection');\r\n    } else if (!process.env.DATABASE) {\r\n      // } else if (!process.env.DATABASE && !DB_STRING) {\r\n      throw new Error('Database connection string not found');\r\n    } else {\r\n      escapedDBString = encodeURIComponent(DB_STRING || process.env.DATABASE || '');\r\n      // db = await mongoose.connect(escapedDBString);\r\n      db = await mongoose.connect(process.env.DATABASE);\r\n      isConnected = db.connections[0].readyState;\r\n      console.log('DB Connection Successful!');\r\n    }\r\n    await createCollections();\r\n  } catch (error) {\r\n    console.log('DB Connection Failed' + error + 'process.env.DATABASE= ' + process.env.DATABASE + 'db =' + db);\r\n    throw error;\r\n  }\r\n};\r\n"]}