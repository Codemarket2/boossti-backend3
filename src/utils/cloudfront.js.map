{"version":3,"file":"cloudfront.js","sourceRoot":"","sources":["cloudfront.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,qCAA8B;AAC9B,mEAAgF;AAChF,uCAAyC;AAEzC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC,CAAC;AAEzF,MAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC;AAE/D,MAAM,kBAAkB,GAAG,KAAK,EAAE,cAAc,EAAE,EAAE;IACzD,MAAM,GAAG,GAAG,MAAM,IAAA,6BAAqB,EAAC,cAAc,CAAC,CAAC;IACxD,MAAM,aAAa,GAAQ;QACzB,kBAAkB,EAAE,EAAE,GAAG,GAAG,CAAC,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAAE;KAClE,CAAC;IACF,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;IACjC,aAAa,CAAC,EAAE,GAAG,cAAc,CAAC;IAClC,OAAO,aAAa,CAAC,IAAI,CAAC;IAC1B,MAAM,SAAS,GAAG,MAAM,IAAA,0BAAkB,EAAC,aAAa,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG;QACb,EAAE,EAAE,cAAc;QAClB,OAAO,EAAE,GAAG,CAAC,IAAI;KAClB,CAAC;IACF,MAAM,SAAS,GAAG,UAAU,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAClE,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAfW,QAAA,kBAAkB,sBAe7B;AAEK,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,EAAE;IAC5C,OAAO,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;AAC1D,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EAAE,WAAmB,EAAE,EAAE;;IAC9D,MAAM,UAAU,GAAG,IAAA,iBAAO,EAAC,WAAW,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,IAAI,CAAC,2BAA2B;QAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5F,MAAM,GAAG,GAAG,MAAM,IAAA,6BAAqB,EAAC,2BAA2B,CAAC,CAAC;IACrE,MAAM,iBAAiB,GACrB,MAAA,MAAA,MAAA,MAAA,GAAG,CAAC,kBAAkB,0CAAE,oBAAoB,CAAC,0BAA0B,0CAAE,KAAK,0CAAG,CAAC,CAAC,0CAC/E,iBAAiB,CAAC;IACxB,MAAM,OAAO,GAAG,IAAA,2CAA4B,EAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC5E,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;IAE9E,MAAM,IAAA,sBAAY,EAAC,UAAU,EAAE,MAAA,cAAc,CAAC,YAAY,0CAAE,UAAU,CAAC,CAAC;IAExE,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAbW,QAAA,kBAAkB,sBAa7B;AAEK,MAAM,qBAAqB,GAAG,CAAC,cAAsB,EAAE,EAAE;IAC9D,MAAM,MAAM,GAAG;QACb,EAAE,EAAE,cAAc;KACnB,CAAC;IACF,OAAO,UAAU,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;AAC5D,CAAC,CAAC;AALW,QAAA,qBAAqB,yBAKhC;AAEK,MAAM,+BAA+B,GAAG,KAAK,EAAE,cAAc,EAAE,EAAE;IACtE,MAAM,GAAG,GAAG,MAAM,IAAA,6BAAqB,EAAC,2BAA2B,CAAC,CAAC;IACrE,MAAM,OAAO,GAAQ,EAAE,GAAG,GAAG,EAAE,CAAC;IAChC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;IAC3B,OAAO,CAAC,EAAE,GAAG,cAAc,CAAC;IAC5B,OAAO,OAAO,CAAC,IAAI,CAAC;IACpB,MAAM,SAAS,GAAG,MAAM,IAAA,0BAAkB,EAAC,OAAO,CAAC,CAAC;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AARW,QAAA,+BAA+B,mCAQ1C","sourcesContent":["import * as AWS from 'aws-sdk';\r\nimport slugify from 'slugify';\r\nimport { getCreateDistributionPayload } from '../../distributions/distribution';\r\nimport { createRecord } from './route53';\r\n\r\nconst cloudfront = new AWS.CloudFront({ region: 'us-east-1', apiVersion: '2020-05-31' });\r\n\r\nconst boosstiMasterDistributionId = process.env.DISTRIBUTION_ID || '';\r\n\r\nexport const deleteDistribution = async (distributionId) => {\r\n  const dis = await getDistributionConfig(distributionId);\r\n  const updatePayload: any = {\r\n    DistributionConfig: { ...dis.DistributionConfig, Enabled: false },\r\n  };\r\n  updatePayload.IfMatch = dis.ETag;\r\n  updatePayload.Id = distributionId;\r\n  delete updatePayload.ETag;\r\n  const updateRes = await updateDistribution(updatePayload);\r\n  const params = {\r\n    Id: distributionId,\r\n    IfMatch: dis.ETag,\r\n  };\r\n  const deleteRes = cloudfront.deleteDistribution(params).promise();\r\n  return deleteRes;\r\n};\r\n\r\nexport const updateDistribution = (payload) => {\r\n  return cloudfront.updateDistribution(payload).promise();\r\n};\r\n\r\nexport const createDistribution = async (accountName: string) => {\r\n  const domainName = slugify(accountName, { lower: true });\r\n  if (!boosstiMasterDistributionId) throw new Error('boosstiMasterDistributionId not found!');\r\n  const res = await getDistributionConfig(boosstiMasterDistributionId);\r\n  const lambdaFunctionARN =\r\n    res.DistributionConfig?.DefaultCacheBehavior.LambdaFunctionAssociations?.Items?.[0]\r\n      ?.LambdaFunctionARN;\r\n  const payload = getCreateDistributionPayload(domainName, lambdaFunctionARN);\r\n  const createResponse = await cloudfront.createDistribution(payload).promise();\r\n\r\n  await createRecord(domainName, createResponse.Distribution?.DomainName);\r\n\r\n  return createResponse;\r\n};\r\n\r\nexport const getDistributionConfig = (distributionId: string) => {\r\n  const params = {\r\n    Id: distributionId,\r\n  };\r\n  return cloudfront.getDistributionConfig(params).promise();\r\n};\r\n\r\nexport const updateDistributionLambdaVersion = async (distributionId) => {\r\n  const res = await getDistributionConfig(boosstiMasterDistributionId);\r\n  const payload: any = { ...res };\r\n  payload.IfMatch = res.ETag;\r\n  payload.Id = distributionId;\r\n  delete payload.ETag;\r\n  const updateRes = await updateDistribution(payload);\r\n  return updateRes;\r\n};\r\n"]}