{"version":3,"file":"authentication.js","sourceRoot":"","sources":["authentication.ts"],"names":[],"mappings":";;;AAAA,wCAAwC;AACxC,uDAAoD;AACpD,+DAA8E;AAIvE,MAAM,cAAc,GAAG,KAAK,EAAE,QAAmB,EAAsB,EAAE;;IAC9E,IAAI,IAAI,CAAC;IACT,IAAI,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAG,YAAY,CAAC,EAAE,CAAC;QACrC,IAAI,GAAG,MAAM,6BAAa,CAAC,OAAO,CAAC;YACjC,GAAG,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAG,YAAY,CAAC;SACtC,CAAC;aACC,QAAQ,CAAC,gCAAgB,CAAC;aAC1B,IAAI,EAAE,CAAC;IACZ,CAAC;SAAM,IAAI,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAE,KAAK,EAAE,CAAC;QACnC,MAAM,QAAQ,GAAG,MAAM,qBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,CAAA,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,YAAY,GAAG,MAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,0CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,CAAC,CAAC,KAAK,0CAAE,WAAW,EAAE,MAAK,OAAO,CAAA,EAAA,CAAC,0CAAE,GAAG,CAAC;QAC5F,IAAI,GAAG,MAAM,6BAAa,CAAC,OAAO,CAAC;YACjC,MAAM,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG;YACrB,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE;SAC9E,CAAC;aACC,QAAQ,CAAC,gCAAgB,CAAC;aAC1B,IAAI,EAAE,CAAC;IACZ,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAtBW,QAAA,cAAc,kBAsBzB","sourcesContent":["// import * as mongoose from 'mongoose';\r\nimport { FormModel } from '../form/utils/formModel';\r\nimport { ResponseModel, responsePopulate } from '../form/utils/responseModel';\r\nimport { IResponse } from '../form/types/response';\r\nimport { IIdentity } from './customTypes';\r\n\r\nexport const getCurrentUser = async (identity: IIdentity): Promise<IResponse> => {\r\n  let user;\r\n  if (identity?.claims?.['custom:_id']) {\r\n    user = await ResponseModel.findOne({\r\n      _id: identity?.claims?.['custom:_id'],\r\n    })\r\n      .populate(responsePopulate)\r\n      .lean();\r\n  } else if (identity?.claims?.email) {\r\n    const userForm = await FormModel.findOne({ slug: process.env.USERS_FORM_SLUG });\r\n    if (!userForm?._id) {\r\n      throw new Error('Users form not found in database');\r\n    }\r\n    const emailFieldId = userForm?.fields?.find((f) => f.label?.toLowerCase() === 'email')?._id;\r\n    user = await ResponseModel.findOne({\r\n      formId: userForm?._id,\r\n      values: { $elemMatch: { value: identity.claims.email, field: emailFieldId } },\r\n    })\r\n      .populate(responsePopulate)\r\n      .lean();\r\n  }\r\n  return user;\r\n};\r\n"]}