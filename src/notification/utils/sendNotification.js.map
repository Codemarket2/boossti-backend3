{"version":3,"file":"sendNotification.js","sourceRoot":"","sources":["sendNotification.ts"],"names":[],"mappings":";;;AAAA,iCAA0B;AAC1B,6CAA8B;AAC9B,iCAAiC;AACjC,qDAA6D;AAC7D,6DAAyD;AACzD,0DAAkD;AAClD,6CAA8C;AAE9C,MAAM,oBAAoB,GAAG,IAAA,qBAAG,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6B/B,CAAC;AAEF,MAAM,EAAE,eAAe,GAAG,EAAE,EAAE,eAAe,GAAG,EAAE,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;AAY/E,MAAM,gBAAgB,GAAG,KAAK,EAAE,OAAgB,EAAE,EAAE;;IACzD,IAAI;QACF,IAAI,eAAe,IAAI,eAAe,EAAE;YACtC,MAAM,YAAY,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACnD,GAAG,OAAO;gBACV,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC,CAAC;YACJ,MAAM,OAAO,CAAC,GAAG,CACf,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC3B,OAAO,IAAA,eAAK,EAAC;oBACX,GAAG,EAAE,eAAe;oBACpB,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,WAAW,EAAE,eAAe;qBAC7B;oBACD,IAAI,EAAE;wBACJ,KAAK,EAAE,oBAAoB;wBAC3B,SAAS,EAAE,CAAC;qBACb;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CACH,CAAC;YACF,MAAM,sCAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC9C;QACD,oDAAoD;QACpD,MAAM,KAAK,GAAG,MAAM,gBAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACjE,MAAM,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACxC,2CAA2C;QAC3C,0CAA0C;KAC3C;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC9B;AACH,CAAC,CAAC;AAhCW,QAAA,gBAAgB,oBAgC3B;AAEF,uEAAuE;AACvE,0BAA0B;AAC1B,2BAA2B;AAE3B,gCAAgC;AAChC,SAAS;AACT,4BAA4B;AAC5B,uBAAuB;AACvB,4BAA4B;AAC5B,yBAAyB;AACzB,OAAO;AACP,UAAU;AACV,2DAA2D;AAC3D,6CAA6C;AAC7C,yDAAyD;AACzD,sBAAsB;AACtB,kCAAkC;AAClC,MAAM;AACN,KAAK;AAEL,MAAM,gBAAgB,GAAG,KAAK,EAAE,OAAgB,EAAE,KAAU,EAAE,EAAE;IAC9D,MAAM,IAAI,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC3C,MAAM,WAAW,GAAG;QAClB,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,OAAO,EAAE,OAAO,CAAC,WAAW;QAC5B,OAAO,EAAE,IAAI;KACd,CAAC;IACF,IAAI;QACF,MAAM,IAAA,gCAAoB,EAAC,WAAW,CAAC,CAAC;KACzC;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC5B;AACH,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,KAAK,EAAE,OAAgB,EAAE,KAAU,EAAE,EAAE;IAC/D,IAAI;QACF,MAAM,OAAO,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,SAAS,GAAG;;;QAGd,OAAO,CAAC,WAAW;qCACU,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,KAAI,GAAG;KACpD,CAAC;QAEF,MAAM,YAAY,GAAG;YACnB,IAAI,EAAE,YAAY;YAClB,EAAE,EAAE,OAAO;YACX,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,mBAAmB,OAAO,CAAC,KAAK,EAAE;SAC5C,CAAC;QAEF,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,EAAE,EAAE;YACpB,MAAM,IAAA,iBAAS,EAAC,YAAY,CAAC,CAAC;SAC/B;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;KACzD;AACH,CAAC,CAAC","sourcesContent":["import axios from 'axios';\r\nimport gql from 'graphql-tag';\r\n// import graphql from 'graphql';\r\nimport { sendPushNotification } from '../../utils/onesignal';\r\nimport { NotificationModel } from './notificationSchema';\r\nimport { User } from '../../user/utils/userModel';\r\nimport { sendEmail } from '../../utils/email';\r\n\r\nconst notificationMutation = gql`\r\n  mutation MyMutation(\r\n    $userId: ID!\r\n    $title: String!\r\n    $description: String\r\n    $link: String\r\n    $formId: ID\r\n    $threadId: ID\r\n    $parentId: ID\r\n  ) {\r\n    sendNotification(\r\n      userId: $userId\r\n      title: $title\r\n      description: $description\r\n      link: $link\r\n      formId: $formId\r\n      threadId: $threadId\r\n      parentId: $parentId\r\n    ) {\r\n      userId\r\n      title\r\n      description\r\n      link\r\n      formId\r\n      threadId\r\n      parentId\r\n      isClicked\r\n    }\r\n  }\r\n`;\r\n\r\nconst { GRAPHQL_API_URL = '', GRAPHQL_API_KEY = '', SENDER_EMAIL = '' } = process.env;\r\n\r\ntype payload = {\r\n  userIds: string[];\r\n  title: string;\r\n  description?: string;\r\n  link?: string;\r\n  formId?: string;\r\n  parentId?: string;\r\n  threadId?: string;\r\n};\r\n\r\nexport const sendNotification = async (payload: payload) => {\r\n  try {\r\n    if (GRAPHQL_API_URL && GRAPHQL_API_KEY) {\r\n      const payloadArray = payload?.userIds?.map((uid) => ({\r\n        ...payload,\r\n        userId: uid,\r\n      }));\r\n      await Promise.all(\r\n        payloadArray.map(async (p) => {\r\n          return axios({\r\n            url: GRAPHQL_API_URL,\r\n            method: 'post',\r\n            headers: {\r\n              'x-api-key': GRAPHQL_API_KEY,\r\n            },\r\n            data: {\r\n              query: notificationMutation,\r\n              variables: p,\r\n            },\r\n          });\r\n        }),\r\n      );\r\n      await NotificationModel.create(payloadArray);\r\n    }\r\n    // const user = await User.findById(payload.userId);\r\n    const users = await User.find({ _id: { $in: payload.userIds } });\r\n    await emailNotification(payload, users);\r\n    // await mobileNotification(payload, user);\r\n    // await pushNotification(payload, users);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\n// const mobileNotification = async (payload: payload, users: any) => {\r\n//   const messageBody = `\r\n//       Dear ${user.name},\r\n\r\n//       ${payload.description}.\r\n//     `;\r\n//   const mobilePayload = {\r\n//     to: user.mobile,\r\n//     from: '+16673032366',\r\n//     body: messageBody,\r\n//   };\r\n//   try {\r\n//     const messageLog = await sendMessage(mobilePayload);\r\n//     console.log('messageLog', messageLog);\r\n//     // we need to save the message log to our database\r\n//   } catch (error) {\r\n//     console.log(error.message);\r\n//   }\r\n// };\r\n\r\nconst pushNotification = async (payload: payload, users: any) => {\r\n  const uids = users?.map((u) => `${u._id}`);\r\n  const pushPayload = {\r\n    title: payload.title,\r\n    message: payload.description,\r\n    userIds: uids,\r\n  };\r\n  try {\r\n    await sendPushNotification(pushPayload);\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nconst emailNotification = async (payload: payload, users: any) => {\r\n  try {\r\n    const toArray = users?.map((u) => u.email);\r\n    const emailBody = `\r\n      Dear User, \r\n    \r\n      ${payload.description}.\r\n       <a href='https://boossti.com${payload?.link || '/'}'><button> View </button></a> \r\n    `;\r\n\r\n    const emailPayload = {\r\n      from: SENDER_EMAIL,\r\n      to: toArray,\r\n      body: emailBody,\r\n      subject: `New Response on ${payload.title}`,\r\n    };\r\n\r\n    if (emailPayload?.to) {\r\n      await sendEmail(emailPayload);\r\n    }\r\n  } catch (error) {\r\n    console.log('Error while sending email', error.message);\r\n  }\r\n};\r\n"]}