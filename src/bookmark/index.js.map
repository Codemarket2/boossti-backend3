{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { DB } from '../utils/DB';\r\nimport { Bookmark } from './utils/bookmarkModel';\r\n// import { User } from '../user/utils/userModel';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\nimport { getCurrentUser } from '../utils/authentication';\r\n\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const { fieldName } = event.info;\r\n    const { arguments: args, identity } = event;\r\n    let data: any = [];\r\n    let count = 0;\r\n    // const tempFilter: any = {};\r\n    // let createdBy;\r\n    // let tempUser: any = null;\r\n\r\n    const user = await getCurrentUser(identity);\r\n\r\n    // if (identity && identity.claims && identity.claims.sub) {\r\n    //   createdBy = identity.claims.sub;\r\n    // }\r\n\r\n    const { page = 1, limit = 50, search = '', active = null, sortBy = '-createdAt' } = args;\r\n\r\n    switch (fieldName) {\r\n      case 'getBookmark': {\r\n        return await Bookmark.findById(args._id);\r\n      }\r\n      case 'getMyBookmarks': {\r\n        // tempUser = await User.findOne({\r\n        //   userId: createdBy,\r\n        // });\r\n        data = await Bookmark.find({\r\n          createdBy: user._id,\r\n          bookmark: { $regex: search, $options: 'i' },\r\n        })\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit)\r\n          .sort(sortBy);\r\n        count = await Bookmark.countDocuments({\r\n          createdBy: user._id,\r\n          bookmark: { $regex: search, $options: 'i' },\r\n        });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'createBookmark': {\r\n        // tempUser = await User.findOne({\r\n        //   userId: createdBy,\r\n        // });\r\n        return await Bookmark.create({\r\n          ...args,\r\n          createdBy: user._id,\r\n        });\r\n      }\r\n      case 'updateBookmark': {\r\n        // tempUser = await User.findOne({\r\n        //   userId: createdBy,\r\n        // });\r\n        return await Bookmark.findByIdAndUpdate(\r\n          args._id,\r\n          { ...args, updatedAt: new Date(), updatedBy: user._id },\r\n          {\r\n            new: true,\r\n            runValidators: true,\r\n          },\r\n        );\r\n      }\r\n      case 'deleteBookmark': {\r\n        await Bookmark.findOneAndDelete({ _id: args._id, createdBy: user._id });\r\n        return true;\r\n      }\r\n      default:\r\n        throw new Error('Something went wrong! Please check your Query or Mutation');\r\n    }\r\n  } catch (error) {\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}