{"version":3,"file":"response.js","sourceRoot":"","sources":["response.ts"],"names":[],"mappings":"","sourcesContent":["import { Schema } from 'mongoose';\r\nimport { IMedia, ISchema } from '../../utils/customTypes';\r\nimport { ICondition } from './form';\r\n\r\nexport interface IResponse extends ISchema {\r\n  formId: any;\r\n  appId: string;\r\n  count: number;\r\n  values: IValue[];\r\n  parentResponseId?: Schema.Types.ObjectId | any; // for dependent relationship\r\n}\r\n\r\n// export interface IValue {\r\n//   _id: string;\r\n//   field: string;\r\n//   value: string;\r\n//   valueNumber: number;\r\n//   valueBoolean: boolean;\r\n//   valueDate: Date;\r\n//   values: string[];\r\n//   template: Schema.Types.ObjectId;\r\n//   page: Schema.Types.ObjectId;\r\n//   response: Schema.Types.ObjectId | any; // IResponse\r\n//   form: Schema.Types.ObjectId;\r\n//   options: IValueOptions | any;\r\n//   media: IMedia[];\r\n// }\r\nexport interface IValue {\r\n  _id: string | null;\r\n  field: string;\r\n  value: string;\r\n  valueNumber: number | null;\r\n  valueBoolean: boolean | null;\r\n  valueDate: Date | null;\r\n  values: string[];\r\n  template: Schema.Types.ObjectId | null;\r\n  page: Schema.Types.ObjectId | null;\r\n  response: Schema.Types.ObjectId | any; // IResponse\r\n  form: Schema.Types.ObjectId | null;\r\n  options: IValueOptions | any;\r\n  media: IMedia[] | null;\r\n}\r\nexport interface IValueOptions {\r\n  conditions: ICondition[];\r\n}\r\n"]}