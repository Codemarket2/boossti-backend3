{"version":3,"file":"getConditionForm.js","sourceRoot":"","sources":["getConditionForm.ts"],"names":[],"mappings":";;;AAEA,kDAA6D;AAC7D,0DAAyE;AAElE,MAAM,6BAA6B,GAAG,KAAK,EAAE,UAAwB,EAAE,EAAE;IAC9E,IAAI,OAAO,GAAa,EAAE,CAAC;IAC3B,IAAI,WAAW,GAAa,EAAE,CAAC;IAC/B,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;QAChC,MAAM,WAAW,GAAG,IAAA,kBAAU,EAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,IAAA,kBAAU,EAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,CAAC;QAClD,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,GAAG,WAAW,EAAE,GAAG,YAAY,CAAC,CAAC;QACxD,MAAM,eAAe,GAAG,cAAc,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,CAAC;QACzD,WAAW,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,eAAe,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAChC,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;IAExC,MAAM,KAAK,GAAG,MAAM,IAAA,qBAAa,EAAC,OAAO,CAAC,CAAC;IAE3C,MAAM,SAAS,GAAiC,EAAE,CAAC;IACnD,MAAM,cAAc,GAAG,MAAM,6BAAa,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC;SAC3E,QAAQ,CAAC,gCAAgB,CAAC;SAC1B,IAAI,EAAE,CAAC;IAEV,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;QACjC,MAAM,QAAQ,GAAG,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,CACnC,CAAC,gBAAgB,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,GAAG,0CAAE,QAAQ,EAAE,MAAK,UAAU,CAAA,EAAA,CACvE,CAAC;QACF,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,EAAE;YACjB,SAAS,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;SAClC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;AAC9B,CAAC,CAAC;AA/BW,QAAA,6BAA6B,iCA+BxC;AAEK,MAAM,UAAU,GAAG,CAAC,IAAmB,EAAE,EAAE;;IAChD,IAAI,OAAO,GAAa,EAAE,CAAC;IAC3B,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAC,CAAC;KAC5B;IACD,IAAI,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,0CAAE,MAAM,EAAE;QAC1B,MAAM,aAAa,GAAG,IAAA,kBAAU,EAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAC,CAAC;QACjD,IAAI,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,IAAG,CAAC,EAAE;YAC7B,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,GAAG,aAAa,CAAC,CAAC;SAC1C;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAZW,QAAA,UAAU,cAYrB;AAEF,MAAM,cAAc,GAAG,CAAC,IAAmB,EAAE,EAAE;;IAC7C,IAAI,WAAW,GAAa,EAAE,CAAC;IAC/B,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,EAAE;QACpB,WAAW,CAAC,IAAI,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,CAAC,CAAC;KACpC;IACD,IAAI,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,0CAAE,UAAU,EAAE;QAC9B,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,IAAG,CAAC,EAAE;YAC7B,WAAW,GAAG,CAAC,GAAG,WAAW,EAAE,GAAG,aAAa,CAAC,CAAC;SAClD;KACF;IACD,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAEK,MAAM,aAAa,GAAG,KAAK,EAAE,OAAO,EAAE,EAAE;IAC7C,MAAM,KAAK,GAA6B,EAAE,CAAC;IAC3C,MAAM,UAAU,GAAG,MAAM,qBAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC;SAC/D,QAAQ,CAAC,wBAAY,CAAC;SACtB,IAAI,EAAE,CAAC;IAEV,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACzB,MAAM,IAAI,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,0CAAE,QAAQ,EAAE,MAAK,MAAM,CAAA,EAAA,CAAC,CAAC;QAC1F,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,EAAE;YACb,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAbW,QAAA,aAAa,iBAaxB","sourcesContent":["import { ConditionPart, ICondition, IForm } from '../types/form';\r\nimport { IResponse } from '../types/response';\r\nimport { FormModel, formPopulate } from '../utils/formModel';\r\nimport { ResponseModel, responsePopulate } from '../utils/responseModel';\r\n\r\nexport const getConditionFormsAndResponses = async (conditions: ICondition[]) => {\r\n  let formIds: string[] = [];\r\n  let responseIds: string[] = [];\r\n  conditions?.forEach((condition) => {\r\n    const leftFormIds = getFormIds(condition?.left);\r\n    const rightFormIds = getFormIds(condition?.right);\r\n    formIds = [...formIds, ...leftFormIds, ...rightFormIds];\r\n    const leftResponseIds = getResponseIds(condition?.right);\r\n    responseIds = [...responseIds, ...leftResponseIds];\r\n  });\r\n\r\n  formIds = [...new Set(formIds)];\r\n  responseIds = [...new Set(responseIds)];\r\n\r\n  const forms = await getFormsByIds(formIds);\r\n\r\n  const responses: { [key: string]: IResponse } = {};\r\n  const responsesArray = await ResponseModel.find({ _id: { $in: responseIds } })\r\n    .populate(responsePopulate)\r\n    .lean();\r\n\r\n  responseIds.forEach((responseId) => {\r\n    const response = responsesArray?.find(\r\n      (selectedResponse) => selectedResponse?._id?.toString() === responseId,\r\n    );\r\n    if (response?._id) {\r\n      responses[responseId] = response;\r\n    }\r\n  });\r\n\r\n  return { forms, responses };\r\n};\r\n\r\nexport const getFormIds = (part: ConditionPart) => {\r\n  let formIds: string[] = [];\r\n  if (part?.formId) {\r\n    formIds.push(part?.formId);\r\n  }\r\n  if (part?.subField?.formId) {\r\n    const nestedFormIds = getFormIds(part?.subField);\r\n    if (nestedFormIds?.length > 0) {\r\n      formIds = [...formIds, ...nestedFormIds];\r\n    }\r\n  }\r\n  return formIds;\r\n};\r\n\r\nconst getResponseIds = (part: ConditionPart) => {\r\n  let responseIds: string[] = [];\r\n  if (part?.responseId) {\r\n    responseIds.push(part?.responseId);\r\n  }\r\n  if (part?.subField?.responseId) {\r\n    const nestedFormIds = getResponseIds(part?.subField);\r\n    if (nestedFormIds?.length > 0) {\r\n      responseIds = [...responseIds, ...nestedFormIds];\r\n    }\r\n  }\r\n  return responseIds;\r\n};\r\n\r\nexport const getFormsByIds = async (formIds) => {\r\n  const forms: { [key: string]: IForm } = {};\r\n  const formsArray = await FormModel.find({ _id: { $in: formIds } })\r\n    .populate(formPopulate)\r\n    .lean();\r\n\r\n  formIds.forEach((formId) => {\r\n    const form = formsArray?.find((selectedForm) => selectedForm?._id?.toString() === formId);\r\n    if (form?._id) {\r\n      forms[formId] = form;\r\n    }\r\n  });\r\n  return forms;\r\n};\r\n"]}