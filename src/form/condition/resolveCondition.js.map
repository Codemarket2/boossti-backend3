{"version":3,"file":"resolveCondition.js","sourceRoot":"","sources":["resolveCondition.ts"],"names":[],"mappings":"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","sourcesContent":["import { systemForms } from '../permission/systemFormsConfig';\r\nimport { ICondition } from '../types/form';\r\nimport { IResponse } from '../types/response';\r\nimport { getUserAttributes, IUserAttributes } from '../utils/actionHelper';\r\nimport { FormModel } from '../utils/formModel';\r\nimport { ResponseModel, responsePopulate } from '../utils/responseModel';\r\nimport { getConditionFormsAndResponses } from './getConditionForm';\r\nimport { getLeftPartValue, getRightPartValue } from './getConditionPartValue';\r\n\r\ninterface IResolveConditionPayload {\r\n  conditions: ICondition[];\r\n  leftPartResponse?: IResponse;\r\n  authState: IUserAttributes;\r\n}\r\n\r\nexport const resolveCondition = async ({\r\n  conditions,\r\n  leftPartResponse,\r\n  authState,\r\n}: IResolveConditionPayload): Promise<boolean> => {\r\n  if (!leftPartResponse?._id) throw new Error('leftPartResponse field not found in payload');\r\n  const { forms, responses } = await getConditionFormsAndResponses(conditions);\r\n  const tempResult: boolean[] = [];\r\n\r\n  for (const condition of conditions) {\r\n    const leftValue = await getLeftPartValue({\r\n      conditionPart: condition?.left,\r\n      forms,\r\n      response: leftPartResponse,\r\n    });\r\n    const rightValue = getRightPartValue({\r\n      conditionPart: condition?.right,\r\n      forms,\r\n      responses,\r\n      authState: authState,\r\n    });\r\n\r\n    let conditionResult = false;\r\n    if (leftValue || rightValue) {\r\n      if (condition?.conditionType === '==') {\r\n        conditionResult = leftValue === rightValue;\r\n      } else if (condition?.conditionType === '!=') {\r\n        conditionResult = leftValue !== rightValue;\r\n      }\r\n    }\r\n    tempResult.push(conditionResult);\r\n  }\r\n\r\n  if (conditions?.[1]?.operator === 'OR') {\r\n    return tempResult?.some((r) => r);\r\n  }\r\n  return !tempResult?.some((r) => !r);\r\n};\r\n\r\nexport const resolveConditionHelper = async ({ user, responseId, conditions }) => {\r\n  const userForm = await FormModel.findOne({ slug: systemForms.users.slug });\r\n  const userAttributes = getUserAttributes(userForm, user);\r\n  const response = await ResponseModel.findById(responseId).populate(responsePopulate).lean();\r\n  if (!response?._id) throw new Error('Response not found');\r\n  const conditionResult = await resolveCondition({\r\n    leftPartResponse: response,\r\n    authState: userAttributes,\r\n    conditions,\r\n  });\r\n  return conditionResult;\r\n};\r\n"]}