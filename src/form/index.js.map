{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import slugify from 'slugify';\r\nimport { DB } from '../utils/DB';\r\nimport { FormModel, formPopulate } from './utils/formModel';\r\nimport { ResponseModel, responsePopulate, myResponsePopulate } from './utils/responseModel';\r\nimport { SectionModel, sectionPopulate } from './utils/sectionModel';\r\nimport { getCurrentUser } from '../utils/authentication';\r\nimport { AppSyncEvent } from '../utils/customTypes';\r\nimport { runFormActions } from './utils/actions';\r\nimport { sendResponseNotification } from './utils/responseNotification';\r\nimport { fileParser } from './utils/readCsvFile';\r\nimport { runInTransaction } from '../utils/runInTransaction';\r\nimport { IField, IForm } from './types/form';\r\nimport { authorization, AuthorizationActionTypes } from './permission/authorization';\r\nimport { IResponse } from './types/response';\r\nimport { resolveConditionHelper } from './condition/resolveCondition';\r\nimport { getFormIds, getFormsByIds } from './condition/getConditionForm';\r\nimport { getLeftPartValue } from './condition/getConditionPartValue';\r\nimport { formAuthorization } from './permission/formAuthorization';\r\nimport { getValueObject } from './utils/getValueObject';\r\nimport { createRelationField } from './utils/createRelationField';\r\nexport const handler = async (event: AppSyncEvent): Promise<any> => {\r\n  try {\r\n    await DB();\r\n    const {\r\n      info: { fieldName },\r\n      identity,\r\n    } = event;\r\n    const user = await getCurrentUser(identity);\r\n    let args = { ...event.arguments };\r\n    if (Object.prototype.hasOwnProperty.call(args, 'name')) {\r\n      args = { ...args, slug: slugify(args.name, { lower: true }) };\r\n    }\r\n    if (fieldName.toLocaleLowerCase().includes('create') && user?._id) {\r\n      args = { ...args, createdBy: user?._id };\r\n    } else if (fieldName.toLocaleLowerCase().includes('update') && user?._id) {\r\n      args = { ...args, updatedBy: user?._id };\r\n    }\r\n\r\n    switch (fieldName) {\r\n      case 'getForm': {\r\n        return await FormModel.findById(args._id).populate(formPopulate);\r\n      }\r\n      case 'getFormRelations': {\r\n        return await FormModel.find({\r\n          fields: { $elemMatch: { form: args?._id, 'options.twoWayRelationship': true } },\r\n        }).populate(formPopulate);\r\n      }\r\n      case 'getFormTabRelations': {\r\n        return await FormModel.find({\r\n          'settings.tabs': { $elemMatch: { 'form._id': args?._id } },\r\n        }).populate(formPopulate);\r\n      }\r\n      case 'getFormAllTabs': {\r\n        const { formId } = args;\r\n        return await FormModel.find({\r\n          _id: { $ne: formId },\r\n          'settings.tabs': { $elemMatch: { 'options.addToAllForms': true } },\r\n        }).populate(formPopulate);\r\n      }\r\n      case 'getFormBySlug': {\r\n        return await FormModel.findOne({ slug: args.slug }).populate(formPopulate);\r\n      }\r\n      case 'getForms': {\r\n        const { page = 1, limit = 20, search = '', isWorkflow = false } = args;\r\n        const { isSuperAdmin, formIds } = await formAuthorization({ user });\r\n\r\n        let filter: any = {\r\n          name: { $regex: search, $options: 'i' },\r\n        };\r\n\r\n        if (isWorkflow) {\r\n          filter = { ...filter, 'settings.isWorkflow': isWorkflow };\r\n        } else {\r\n          filter = { ...filter, 'settings.isWorkflow': { $ne: true } };\r\n        }\r\n\r\n        if (!isSuperAdmin) {\r\n          filter._id = { $in: formIds };\r\n        }\r\n        const data = await FormModel.find(filter)\r\n          .populate(formPopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit);\r\n        const count = await FormModel.countDocuments(filter);\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'createForm': {\r\n        let form;\r\n        const callback = async (session, updatedForm) => {\r\n          await createRelationField(session, updatedForm, (newForm) => {\r\n            form = newForm;\r\n          });\r\n        };\r\n        await runInTransaction(\r\n          {\r\n            action: 'CREATE',\r\n            Model: FormModel,\r\n            args,\r\n            populate: formPopulate,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n        return form;\r\n      }\r\n      case 'updateForm': {\r\n        let form;\r\n        const callback = async (session, updatedForm) => {\r\n          await createRelationField(session, updatedForm, (newForm) => {\r\n            form = newForm;\r\n          });\r\n        };\r\n        await runInTransaction(\r\n          {\r\n            action: 'UPDATE',\r\n            Model: FormModel,\r\n            args,\r\n            populate: formPopulate,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n        return form;\r\n      }\r\n      case 'deleteForm': {\r\n        const callback = async (session, form) => {\r\n          await ResponseModel.deleteMany({ formId: form?._id });\r\n        };\r\n        const form = await runInTransaction(\r\n          {\r\n            action: 'DELETE',\r\n            Model: FormModel,\r\n            args,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n        return form._id;\r\n      }\r\n      case 'getResponse': {\r\n        const response: any = await ResponseModel.findById(args?._id)\r\n          .populate(responsePopulate)\r\n          .lean();\r\n        await authorization({\r\n          user,\r\n          actionType: AuthorizationActionTypes.VIEW,\r\n          formId: response?.formId,\r\n          response,\r\n          appId: args?.appId,\r\n        });\r\n        return response;\r\n      }\r\n      case 'getResponseByCount': {\r\n        const { formId, count } = args;\r\n        const filter: any = { formId, count };\r\n        if (args?.appId) {\r\n          filter.appId = args?.appId;\r\n        }\r\n        const response: any = await ResponseModel.findOne(filter).populate(responsePopulate).lean();\r\n        if (!response?._id) throw new Error('response not found');\r\n        await authorization({\r\n          user,\r\n          actionType: AuthorizationActionTypes.VIEW,\r\n          formId: response?.formId,\r\n          response,\r\n          appId: filter?.appId,\r\n        });\r\n        // const oldOptions = { ...args.options };\r\n        // if (!(process.env.NODE_ENV === 'test')) {\r\n        //   const res: any = await FormModel.findById(response?.formId).populate(formPopulate);\r\n        //   const form = { ...res.toObject() };\r\n        //   await runFormActions({\r\n        //     triggerType: 'onView',\r\n        //     form: {\r\n        //       ...form,\r\n        //       settings: {\r\n        //         ...form.settings,\r\n        //         actions: args?.options?.actions || form.settings?.actions,\r\n        //       },\r\n        //     },\r\n        //     response: { ...response.toObject(), options: oldOptions },\r\n        //   });\r\n        // }\r\n        return response;\r\n      }\r\n      case 'getResponses': {\r\n        const {\r\n          page = 1,\r\n          limit = 20,\r\n          formId,\r\n          search = '',\r\n          formField,\r\n          onlyMy = false,\r\n          workflowId = null,\r\n          valueFilter,\r\n          appId,\r\n          parentResponseId,\r\n        } = args;\r\n        let filter: any = { formId };\r\n        if (appId) {\r\n          filter = { ...filter, appId };\r\n        }\r\n        if (parentResponseId) {\r\n          filter = { ...filter, parentResponseId };\r\n        }\r\n        if (workflowId) {\r\n          filter = { ...filter, workflowId };\r\n        }\r\n        if (onlyMy && user?._id) {\r\n          filter.createdBy = user?._id;\r\n        }\r\n        if (valueFilter) {\r\n          filter = { ...filter, ...valueFilter };\r\n        }\r\n        if (search && formField) {\r\n          filter = {\r\n            ...filter,\r\n            $or: [{ 'values.value': { $regex: search, $options: 'i' } }],\r\n          };\r\n        }\r\n\r\n        let runLoop = true;\r\n        const data: IResponse[] = [];\r\n        let pointer = 0;\r\n        let errorCount = 0;\r\n        while (runLoop) {\r\n          try {\r\n            const response: any = await ResponseModel.findOne(filter)\r\n              .populate(responsePopulate)\r\n              .sort({ createdAt: -1 })\r\n              .skip((page - 1) * limit + pointer)\r\n              .lean();\r\n            pointer += 1;\r\n            if (response?._id) {\r\n              await authorization({\r\n                user,\r\n                actionType: AuthorizationActionTypes.VIEW,\r\n                formId: response?.formId,\r\n                response,\r\n                appId: args?.appId,\r\n              });\r\n              data.push(response);\r\n              if (data.length >= limit) {\r\n                runLoop = false;\r\n              }\r\n            } else {\r\n              runLoop = false;\r\n            }\r\n          } catch (error) {\r\n            errorCount += 1;\r\n          }\r\n        }\r\n        const count = await ResponseModel.countDocuments(filter);\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'createResponse': {\r\n        args = { ...args, count: 1 };\r\n        await authorization({\r\n          user,\r\n          actionType: AuthorizationActionTypes.CREATE,\r\n          formId: args.formId,\r\n          // response: null,\r\n          appId: args?.appId,\r\n        });\r\n        const lastResponse = await ResponseModel.findOne({ formId: args.formId }).sort('-count');\r\n        if (lastResponse) {\r\n          args = { ...args, count: lastResponse?.count + 1 };\r\n        }\r\n        const callback = async (session, response) => {\r\n          // Run Actions\r\n          const res: any = await FormModel.findById(args.formId)\r\n            .populate(formPopulate)\r\n            .session(session);\r\n          const form: any = { ...res.toObject() };\r\n          form.settings = form.settings || {};\r\n          form.settings.actions = args?.options?.actions || form.settings?.actions;\r\n          response.options = args.options;\r\n\r\n          await runFormActions({\r\n            triggerType: 'onCreate',\r\n            form,\r\n            response,\r\n            args,\r\n            session,\r\n            user,\r\n          });\r\n\r\n          await sendResponseNotification({ session, form, response });\r\n        };\r\n\r\n        const response = await runInTransaction(\r\n          {\r\n            action: 'CREATE',\r\n            Model: ResponseModel,\r\n            args,\r\n            populate: responsePopulate,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n\r\n        return response;\r\n      }\r\n      case 'updateResponse': {\r\n        const tempResponse: any = await ResponseModel.findById(args?._id)\r\n          .populate(responsePopulate)\r\n          .lean();\r\n        await authorization({\r\n          user,\r\n          actionType: AuthorizationActionTypes.EDIT,\r\n          formId: tempResponse?.formId,\r\n          response: tempResponse,\r\n          appId: tempResponse?.appId,\r\n        });\r\n        const callback = async (session, response) => {\r\n          const res: any = await FormModel.findById(response.formId).populate(formPopulate);\r\n          const form = { ...res.toObject() };\r\n          form.settings = form.settings || {};\r\n          form.settings.actions = args?.options?.actions || form.settings?.actions;\r\n          response.options = args.options;\r\n          await runFormActions({\r\n            triggerType: 'onUpdate',\r\n            form,\r\n            response,\r\n            args,\r\n            session,\r\n            user,\r\n          });\r\n          // await sendResponseNotification(form, response);\r\n        };\r\n        if (args?.appId) {\r\n          delete args?.appId;\r\n        }\r\n        const response = await runInTransaction(\r\n          {\r\n            action: 'UPDATE',\r\n            Model: ResponseModel,\r\n            args,\r\n            populate: responsePopulate,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n        return response;\r\n      }\r\n      case 'deleteResponse': {\r\n        const tempResponse: any = await ResponseModel.findById(args?._id)\r\n          .populate(responsePopulate)\r\n          .lean();\r\n        await authorization({\r\n          user,\r\n          actionType: AuthorizationActionTypes.DELETE,\r\n          formId: tempResponse?.formId,\r\n          response: tempResponse,\r\n          appId: tempResponse?.appId,\r\n        });\r\n        const callback = async (session, response) => {\r\n          const res: any = await FormModel.findById(response.formId).populate(formPopulate);\r\n          const form: IForm = { ...res?.toObject() };\r\n          form.settings = form.settings || {};\r\n          form.settings.actions = args?.options?.actions || form.settings?.actions;\r\n          response.options = args.options;\r\n\r\n          const relationFieldIds: string[] = [];\r\n          form?.fields?.forEach((field) => {\r\n            if (field?.fieldType === 'response' && !field?.options?.selectItem) {\r\n              relationFieldIds.push(field?._id?.toString());\r\n            }\r\n          });\r\n          if (relationFieldIds?.length > 0) {\r\n            const responseIds: string[] = [];\r\n            response?.values?.forEach((value) => {\r\n              if (\r\n                relationFieldIds?.includes(value?.field?.toString()) &&\r\n                (value?.response?._id || value?.response)\r\n              ) {\r\n                responseIds?.push(value?.response?._id || value?.response);\r\n              }\r\n            });\r\n            if (responseIds?.length > 0) {\r\n              await ResponseModel.deleteMany({ _id: { $in: responseIds } });\r\n            }\r\n          }\r\n          await runFormActions({\r\n            triggerType: 'onDelete',\r\n            form,\r\n            response,\r\n            args,\r\n            session,\r\n            user,\r\n          });\r\n          // await sendResponseNotification(form, response);\r\n        };\r\n        const response = await runInTransaction(\r\n          {\r\n            action: 'DELETE',\r\n            Model: ResponseModel,\r\n            args,\r\n            user,\r\n          },\r\n          callback,\r\n        );\r\n        return response._id;\r\n      }\r\n      case 'getMyResponses': {\r\n        const { page = 1, limit = 20 } = args;\r\n        const data = await ResponseModel.find({ createdBy: user._id })\r\n          .sort({ createdAt: -1 })\r\n          .populate(myResponsePopulate)\r\n          .limit(limit * 1)\r\n          .skip((page - 1) * limit);\r\n        const count = await ResponseModel.countDocuments({ createdBy: user._id });\r\n        return {\r\n          data,\r\n          count,\r\n        };\r\n      }\r\n      case 'createBulkResponses': {\r\n        // debugger;\r\n        const { formId, fileUrl, map, parentId, createdBy } = args;\r\n\r\n        const filter: any = Object.values(map);\r\n        const fields = Object.keys(map);\r\n        const fileData = await fileParser(fileUrl, filter);\r\n        // debugger;\r\n        const res: any = await FormModel.findById(args.formId);\r\n\r\n        const form: any = { ...res.toObject() };\r\n\r\n        const callback = async (session, response) => {\r\n          // Run Actions\r\n          const res: any = await FormModel.findById(args.formId)\r\n            .populate(formPopulate)\r\n            .session(session);\r\n          const form: any = { ...res.toObject() };\r\n          form.settings = form.settings || {};\r\n          form.settings.actions = args?.options?.actions || form.settings?.actions;\r\n          response.options = args.options;\r\n\r\n          await runFormActions({\r\n            triggerType: 'onCreate',\r\n            form,\r\n            response,\r\n            args,\r\n            session,\r\n            user,\r\n          });\r\n\r\n          // await sendResponseNotification({ session, form, response });\r\n        };\r\n\r\n        for (let i = 0; i < fileData.length; i++) {\r\n          args.values = [];\r\n          // debugger;\r\n          const lastResponse = await ResponseModel.findOne({ formId: args.formId }).sort('-count');\r\n          if (lastResponse) {\r\n            args = { ...args, count: lastResponse?.count + 1 };\r\n          }\r\n\r\n          const file = fileData[i];\r\n          for (let j = 0; j < fields.length; j++) {\r\n            const data = file[filter[j]];\r\n\r\n            const fieldOBj = form.fields.filter((field) => {\r\n              if (field._id.toString() === fields[j]) {\r\n                return field;\r\n              }\r\n            });\r\n\r\n            // const value = {\r\n            //   value: '',\r\n            //   valueBoolean: null,\r\n            //   valueDate: null,\r\n            //   media: [],\r\n            //   values: [],\r\n            //   template: null,\r\n            //   page: null,\r\n            //   form: null,\r\n            //   response: null,\r\n            //   options: { option: false },\r\n            //   tempMedia: [],\r\n            //   tempMediaFiles: [],\r\n            //   field: fields[j],\r\n            //   valueNumber: number,\r\n            // };\r\n\r\n            const valueObj = getValueObject(data, fieldOBj[0], fields[j]);\r\n\r\n            args.values.push(valueObj);\r\n          }\r\n\r\n          const response = await runInTransaction(\r\n            {\r\n              action: 'CREATE',\r\n              Model: ResponseModel,\r\n              args,\r\n              populate: responsePopulate,\r\n              user,\r\n            },\r\n            callback,\r\n          );\r\n\r\n          delete args.values; // after creating response delete values from args otherwise multiple value will be creted in single response\r\n          // debugger;\r\n        }\r\n        // debugger;\r\n        // const x = await Promise.all(\r\n        //   fileData.map(async (file, idx) => {\r\n        //     debugger;\r\n        //     const response = {\r\n        //       formId: formId,\r\n        //       parentId: parentId,\r\n        //       values: [{}],\r\n        //       createdBy: createdBy,\r\n        //       count: responsesPresentInDB + idx + 1,\r\n        //     };\r\n        //     for (let i = 0; i < fields.length; i++) {\r\n        //       const value = {\r\n        //         value: '',\r\n        //         valueBoolean: null,\r\n        //         valueDate: null,\r\n        //         media: [],\r\n        //         values: [],\r\n        //         template: null,\r\n        //         page: null,\r\n        //         form: null,\r\n        //         response: null,\r\n        //         options: { option: false },\r\n        //         tempMedia: [],\r\n        //         tempMediaFiles: [],\r\n        //         field: fields[i],\r\n        //         valueNumber: file[filter[i]],\r\n        //       };\r\n        //       response.values.push(value);\r\n        //       if (i === fields.length - 1) response.values.shift();\r\n        //     }\r\n        //     const res: any = await FormModel.findById(response.formId).populate(formPopulate);\r\n        //     const form = { ...res.toObject() };\r\n        //     form.settings = form.settings || {};\r\n        //     form.settings.actions = args?.options?.actions || form.settings?.actions;\r\n        //     debugger;\r\n        //     await runFormActions({\r\n        //       triggerType: 'onCreate',\r\n        //       form,\r\n        //       response,\r\n        //       args,\r\n        //       session,\r\n        //       user,\r\n        //     });\r\n        //     responses.push(response);\r\n        //   }),\r\n        // );\r\n\r\n        // const responseCreated = await ResponseModel.create(responses);\r\n        // responseCreated = await responseCreated.populate(responsePopulate) //.execPopulate();\r\n        // Run Actions\r\n        // const form = await FormModel.findById(responseCreated.formId);\r\n        // await runFormActions(responseCreated, form);\r\n        // if (!(process.env.NODE_ENV === 'test')) {\r\n        //   await sendResponseNotification(form, responseCreated);\r\n        // }\r\n        return true;\r\n      }\r\n      case 'getSection': {\r\n        let section = await SectionModel.findById(args._id).populate(sectionPopulate);\r\n        if (section) {\r\n          return section;\r\n        } else if (user?._id) {\r\n          section = await SectionModel.create({ _id: args._id, createdBy: user._id });\r\n          return await section.populate(sectionPopulate); //.execPopulate();\r\n        }\r\n        return null;\r\n      }\r\n      case 'createSection': {\r\n        return await SectionModel.create({ createdBy: user._id });\r\n      }\r\n      case 'updateSection': {\r\n        const section: any = await SectionModel.findByIdAndUpdate(args._id, args, {\r\n          new: true,\r\n          runValidators: true,\r\n        });\r\n        if (section) {\r\n          return await section.populate(sectionPopulate); //.execPopulate();\r\n        }\r\n        return null;\r\n      }\r\n      case 'getCheckUnique': {\r\n        const { formId, responseId, valueFilter = {}, appId } = args;\r\n        let filter: any = {\r\n          formId,\r\n          ...valueFilter,\r\n          appId,\r\n        };\r\n        if (responseId) {\r\n          filter = {\r\n            ...filter,\r\n            _id: { $ne: responseId },\r\n          };\r\n        }\r\n        const response = await ResponseModel.findOne(filter).lean();\r\n        return response?._id;\r\n      }\r\n      case 'resolveCondition': {\r\n        const { responseId, conditions } = args;\r\n        // debugger;\r\n        const conditionResult = await resolveConditionHelper({ responseId, conditions, user });\r\n        return conditionResult;\r\n      }\r\n      case 'checkUniqueBetweenMultipleValues': {\r\n        const { responseIds = [], subField } = args;\r\n        let isDuplicateValue = false;\r\n        if (responseIds?.length > 1) {\r\n          const formIds = getFormIds(subField);\r\n          const forms = await getFormsByIds(formIds);\r\n          const values: any = [];\r\n          for (const responseId of responseIds) {\r\n            const response = await ResponseModel.findById(responseId);\r\n            if (response?._id) {\r\n              const value = await getLeftPartValue({\r\n                conditionPart: subField,\r\n                forms,\r\n                response,\r\n              });\r\n              if (value) {\r\n                if (values?.includes(value)) {\r\n                  isDuplicateValue = true;\r\n                }\r\n                values.push(value);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return isDuplicateValue;\r\n      }\r\n      case 'checkPermission': {\r\n        const { actionType, responseId, formId, appId } = args;\r\n        let hasPermission = false;\r\n        let response;\r\n        if (actionType !== 'CREATE') {\r\n          response = await ResponseModel.findById(responseId).populate(responsePopulate).lean();\r\n          if (!response?._id) {\r\n            throw new Error('Response not found');\r\n          }\r\n        }\r\n        await authorization({\r\n          actionType,\r\n          user,\r\n          response,\r\n          formId: response?.formId || formId,\r\n          appId,\r\n        });\r\n        hasPermission = true;\r\n        return hasPermission;\r\n      }\r\n      default:\r\n        throw new Error('Something went wrong! Please check your Query or Mutation');\r\n    }\r\n  } catch (error) {\r\n    const error2 = error;\r\n    throw error2;\r\n  }\r\n};\r\n"]}