{"version":3,"file":"actionVariables.js","sourceRoot":"","sources":["actionVariables.ts"],"names":[],"mappings":";;;AAAA,oEAA0E;AAC1E,8EAAsE;AAE/D,MAAM,wBAAwB,GAAG,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE;IACjE,MAAM,cAAc,GAAG,EAAE,CAAC;IAE1B,KAAK,MAAM,QAAQ,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,EAAE;QACxC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI;YACF,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,EAAE;gBACnB,MAAM,OAAO,GAAG,IAAA,6BAAU,EAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,CAAC,CAAC;gBAC5C,MAAM,KAAK,GAAG,MAAM,IAAA,gCAAa,EAAC,OAAO,CAAC,CAAC;gBAC3C,KAAK,GAAG,MAAM,IAAA,wCAAgB,EAAC,EAAE,aAAa,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;aACrF;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,8DAA8D,EAAE,KAAK,CAAC,CAAC;SACpF;QACD,cAAc,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,CAAC,GAAG,KAAK,CAAC;KACxC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAjBW,QAAA,wBAAwB,4BAiBnC;AAMK,MAAM,qBAAqB,GAAG,CAAC,EAAE,IAAI,EAAE,cAAc,EAAgC,EAAE,EAAE;;IAC9F,IAAI,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;IACzB,MAAA,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,0CAAE,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAC3C,OAAO,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,KAAK,GAAG,IAAI,EAAE,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,GAAG,CAAC,KAAI,EAAE,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AANW,QAAA,qBAAqB,yBAMhC","sourcesContent":["import { getFormIds, getFormsByIds } from '../condition/getConditionForm';\r\nimport { getLeftPartValue } from '../condition/getConditionPartValue';\r\n\r\nexport const getActionVariableValues2 = async (action, response) => {\r\n  const variableValues = {};\r\n\r\n  for (const variable of action?.variables) {\r\n    let value = '';\r\n    try {\r\n      if (variable?.field) {\r\n        const formIds = getFormIds(variable?.field);\r\n        const forms = await getFormsByIds(formIds);\r\n        value = await getLeftPartValue({ conditionPart: variable?.field, response, forms });\r\n      }\r\n    } catch (error) {\r\n      console.log('Error while getting variable value, getActionVariableValues2', error);\r\n    }\r\n    variableValues[variable?.name] = value;\r\n  }\r\n  return variableValues;\r\n};\r\n\r\ninterface ReplaceVariableValue2Payload {\r\n  text: string;\r\n  variableValues: any;\r\n}\r\nexport const replaceVariableValue2 = ({ text, variableValues }: ReplaceVariableValue2Payload) => {\r\n  let newText = text || '';\r\n  Object.keys(variableValues)?.forEach((key) => {\r\n    newText = newText?.split(`{{${key}}}`).join(variableValues?.[key] || '');\r\n  });\r\n  return newText;\r\n};\r\n"]}