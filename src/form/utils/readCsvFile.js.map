{"version":3,"file":"readCsvFile.js","sourceRoot":"","sources":["readCsvFile.ts"],"names":[],"mappings":";AAAA,kCAAkC;;;AAElC,+BAA+B;AAC/B,uCAAuC;AAEvC,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC;AACjB,MAAM,UAAU,GAAG,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;IAC7E,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;IAElD,MAAM,MAAM,GAAG;QACb,MAAM,EAAE,UAAU;QAClB,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;KACjB,CAAC;IAEF,MAAM,OAAO,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACxD,MAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,MAAM,SAAS,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAChD,MAAM,MAAM,GAAG,GAAG;aACf,WAAW,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;aAC7E,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC;YACrB,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAO,EAAE,EAAE;gBACzB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC;aACD,EAAE,CAAC,KAAK,EAAE;YACT,OAAO,CAAC,4BAA4B,CAAC,CAAC;QACxC,CAAC,CAAC;aACD,EAAE,CAAC,OAAO,EAAE;YACX,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI;QACF,MAAM,SAAS,CAAC;KACjB;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KACnC;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AApCW,QAAA,UAAU,cAoCrB;AAEF,wJAAwJ","sourcesContent":["// const AWS = require('aws-sdk');\r\n\r\nimport * as AWS from 'aws-sdk';\r\nimport * as csv from '@fast-csv/parse';\r\n\r\nconst S3 = new AWS.S3();\r\nexport const fileParser = async (fileUrl, filter, maxRows = 0, skipRows = 0) => {\r\n  const splitUrl = fileUrl.split('.s3.us-east-1.amazonaws.com/');\r\n  const bucketName = splitUrl[0].split('://').pop();\r\n\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: splitUrl[1],\r\n  };\r\n\r\n  const csvFile = S3.getObject(params).createReadStream();\r\n  const data: any = [];\r\n  const parserFcn = new Promise((resolve, reject) => {\r\n    const parser = csv\r\n      .parseStream(csvFile, { headers: true, ignoreEmpty: true, maxRows, skipRows })\r\n      .on('data', function (d) {\r\n        const res: any = {};\r\n        filter.forEach((fv: any) => {\r\n          res[fv] = d[fv];\r\n        });\r\n        data.push(res);\r\n      })\r\n      .on('end', function () {\r\n        resolve('csv parse process finished');\r\n      })\r\n      .on('error', function () {\r\n        reject('csv parse process failed');\r\n      });\r\n  });\r\n\r\n  try {\r\n    await parserFcn;\r\n  } catch (error) {\r\n    console.log('Get Error: ', error);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n//'https://vijaa-content-bucket202938-dev.s3.us-east-1.amazonaws.com/public/media/csvDataFile/text-5e770856-3272-4043-8fc9-9c42f11237881642092564326.csv\r\n"]}