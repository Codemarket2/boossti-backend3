{"version":3,"file":"responseNotification.js","sourceRoot":"","sources":["responseNotification.ts"],"names":[],"mappings":";;;AACA,gFAAgF;AAChF,6CAA8C;AAC9C,iDAAmD;AACnD,2CAAwC;AAUjC,MAAM,wBAAwB,GAAG,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAY,EAAE,EAAE;;IACtF,IACE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM;QAC/B,CAAC,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,SAAS,0CAAE,GAAG,CAAA;QACrB,CAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,SAAS,0CAAE,GAAG,0CAAE,QAAQ,EAAE,OAAK,MAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,SAAS,0CAAE,GAAG,0CAAE,QAAQ,EAAE,CAAA,EACzE;QACA,OAAO;KACR;IACD,MAAM,QAAQ,GAAG,MAAM,qBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAEjG,MAAM,SAAS,GAAG,IAAA,gCAAiB,EAAC,QAAQ,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,SAAS,CAAC,CAAC;IAC/D,MAAM,aAAa,GAAG,IAAA,gCAAiB,EAAC,QAAQ,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,SAAS,CAAC,CAAC;IACvE,MAAM,iBAAiB,GAAG,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI,KAAI,sBAAsB,CAAC;IAExE,MAAM,IAAI,GAAG,SAAS,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI;;WAE5B,iBAAiB,0CAA0C,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI;;iBAE/D,OAAO,CAAC,GAAG,CAAC,YAAY,SAAS,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,aAAa,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK;WAC7E,CAAC;IACV,MAAM,EAAE,GAAa,EAAE,CAAC;IACxB,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAE;QACpB,EAAE,CAAC,IAAI,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC,CAAC;KAC3B;IACD,MAAM,YAAY,GAAG;QACnB,IAAI,EAAE,YAAY,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG;QAC7C,EAAE;QACF,IAAI;QACJ,OAAO,EAAE,mBAAmB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,OAAO;KAC9C,CAAC;IACF,IAAI,CAAA,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,EAAE,0CAAE,MAAM,IAAG,CAAC,KAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,CAAA;QAAE,MAAM,IAAA,iBAAS,EAAC,YAAY,CAAC,CAAC;AACxF,CAAC,CAAC;AA/BW,QAAA,wBAAwB,4BA+BnC","sourcesContent":["import { ClientSession } from 'mongoose';\r\n// import { sendNotification } from '../../notification/utils/sendNotification';\r\nimport { sendEmail } from '../../utils/email';\r\nimport { getUserAttributes } from './actionHelper';\r\nimport { FormModel } from './formModel';\r\nimport { IForm } from '../types/form';\r\nimport { IResponse } from '../types/response';\r\n\r\ninterface IPayload {\r\n  session: ClientSession;\r\n  form: IForm;\r\n  response: IResponse;\r\n}\r\n\r\nexport const sendResponseNotification = async ({ session, form, response }: IPayload) => {\r\n  if (\r\n    process.env.NODE_ENV === 'test' ||\r\n    !form?.createdBy?._id ||\r\n    form?.createdBy?._id?.toString() === response?.createdBy?._id?.toString()\r\n  ) {\r\n    return;\r\n  }\r\n  const userForm = await FormModel.findOne({ slug: process.env.USERS_FORM_SLUG }).session(session);\r\n\r\n  const formOwner = getUserAttributes(userForm, form?.createdBy);\r\n  const responseOwner = getUserAttributes(userForm, response?.createdBy);\r\n  const responseOwnerName = responseOwner?.name || 'UnAuthenticated user';\r\n\r\n  const body = `Hello ${formOwner?.name}<br/>\r\n      <p>\r\n      <b>${responseOwnerName}</b> has submitted response on your <b>${form?.name} form</b>.\r\n      <br/>\r\n      <a href=\"${process.env.FRONTEND_URL}/form/${form?.slug}/response/${response?.count}\"><button>View Response</button></a>\r\n      </p>`;\r\n  const to: string[] = [];\r\n  if (formOwner?.email) {\r\n    to.push(formOwner?.email);\r\n  }\r\n  const emailPayload = {\r\n    from: `Boossti <${process.env.SENDER_EMAIL}>`,\r\n    to,\r\n    body,\r\n    subject: `New Response on ${form?.name} form`,\r\n  };\r\n  if (emailPayload?.to?.length > 0 && emailPayload?.from) await sendEmail(emailPayload);\r\n};\r\n"]}