{"version":3,"file":"formAuthorization.js","sourceRoot":"","sources":["formAuthorization.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResponseModel } from '../utils/responseModel';\r\nimport { getSystemForms } from './authorization';\r\nimport { getFieldByLabel } from './fieldHelper';\r\nimport { getUserRoleIds } from './getUserRoleIds';\r\nimport { systemForms } from './systemFormsConfig';\r\n\r\ninterface FormAuthorizationPayload {\r\n  user: any;\r\n}\r\n\r\nexport async function formAuthorization({ user }: FormAuthorizationPayload) {\r\n  const formIds: string[] = [];\r\n  if (process?.env?.NODE_ENV === 'test') {\r\n    return { formIds, isSuperAdmin: true };\r\n  }\r\n  const { userForm, permissionsForm, roleActionConditionForm } = await getSystemForms();\r\n  const { isSuperAdmin, userRoleIds } = await getUserRoleIds({ user, userForm });\r\n\r\n  const roleField = getFieldByLabel(\r\n    systemForms.roleActionCondition.fields.role,\r\n    roleActionConditionForm?.fields,\r\n  );\r\n  if (!roleField?._id) throw new Error('Role field not found in role action condition form');\r\n\r\n  const roleActionConditionResponses = await ResponseModel.find({\r\n    formId: roleActionConditionForm?._id,\r\n    'values.field': roleField?._id,\r\n    'values.response': { $in: userRoleIds },\r\n  }).lean();\r\n\r\n  const roleActionConditionIds = roleActionConditionResponses?.map((r) => r?._id);\r\n\r\n  if (roleActionConditionIds?.length > 0) {\r\n    const permissionFormRoleActionConditionField = getFieldByLabel(\r\n      systemForms.permissions.fields.roleActionCondition,\r\n      permissionsForm?.fields,\r\n    );\r\n    if (!permissionFormRoleActionConditionField?._id)\r\n      throw new Error('RoleActionCondition field not found in permissions form');\r\n\r\n    const permissionFormFormField = getFieldByLabel(\r\n      systemForms.permissions.fields.form,\r\n      permissionsForm?.fields,\r\n    );\r\n    if (!permissionFormFormField?._id)\r\n      throw new Error('formField field not found in permissions form');\r\n\r\n    const permissionsResponses = await ResponseModel.find({\r\n      formId: permissionsForm?._id,\r\n      'values.field': permissionFormRoleActionConditionField?._id,\r\n      'values.response': { $in: roleActionConditionIds },\r\n    }).lean();\r\n\r\n    permissionsResponses?.forEach((res) => {\r\n      const formFieldValue = res?.values?.find(\r\n        (r) => r?.field?.toString() === permissionFormFormField?._id?.toString(),\r\n      );\r\n      if (formFieldValue?.form) {\r\n        formIds.push(formFieldValue?.form?.toString());\r\n      }\r\n    });\r\n  }\r\n\r\n  return { isSuperAdmin, formIds };\r\n}\r\n"]}